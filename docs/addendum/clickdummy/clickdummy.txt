

/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
*/
import React, { useState, useMemo, useEffect, useRef } from 'react';
import { createRoot } from 'react-dom/client';

// --- UTILITY ---
const uuid = () => `id-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;

// --- JOB MARKET GENERATOR based on spec ---
const ROLES = ['Gardener', 'Technician', 'Operator', 'Janitor', 'Manager'];
const SKILLS_BY_ROLE = {
    Gardener: ['Cultivation', 'Pest Control', 'Harvesting'],
    Technician: ['Mechanics', 'Electronics', 'Plumbing'],
    Operator: ['Logistics', 'Packaging', 'Quality Control'],
    Janitor: ['Cleaning', 'Waste Mgmt.', 'Hygiene'],
    Manager: ['Leadership', 'Finance', 'HR'],
};
const TRAITS = ['Hard Worker', 'Detail-Oriented', 'Fast Learner', 'Calm', 'Lazy', 'Clumsy', 'Ambitious'];
const NAMES = [
    { name: 'John Smith', gender: 'male' }, { name: 'Maria Garcia', gender: 'female' }, { name: 'David Lee', gender: 'male' },
    { name: 'Sarah Miller', gender: 'female' }, { name: 'Michael Brown', gender: 'male' }, { name: 'Jessica Davis', gender: 'female' },
    { name: 'Chris Rodriguez', gender: 'male' }, { name: 'Emily Wilson', gender: 'female' }, { name: 'Daniel Martinez', gender: 'male' },
    { name: 'Ashley Anderson', gender: 'female' }, { name: 'James Taylor', gender: 'male' }, { name: 'Amanda Thomas', gender: 'female' },
];

const generateCandidates = (count = 8) => {
    const candidates = [];
    const usedNames = new Set();
    for (let i = 0; i < count; i++) {
        let candidateName;
        do {
            candidateName = NAMES[Math.floor(Math.random() * NAMES.length)].name;
        } while (usedNames.has(candidateName));
        usedNames.add(candidateName);

        const role = ROLES[Math.floor(Math.random() * ROLES.length)];
        const baseSalary = { Gardener: 32000, Technician: 38000, Operator: 35000, Janitor: 28000, Manager: 55000 }[role];

        const skills = {};
        let skillSum = 0;
        SKILLS_BY_ROLE[role].forEach(skill => {
            const level = Math.ceil(Math.random() * 5);
            skills[skill] = level;
            skillSum += level;
        });

        const traits = [];
        if (Math.random() > 0.4) { // 60% chance of trait
            traits.push(TRAITS[Math.floor(Math.random() * TRAITS.length)]);
        }

        const salary = Math.round((baseSalary * (1 + (skillSum - 6) * 0.05) + Math.random() * 2000) / 100) * 100;

        candidates.push({
            id: uuid(),
            name: candidateName,
            desiredRole: role,
            expectedSalary: salary,
            skills,
            traits,
        });
    }
    return candidates;
};

const createPlant = (props) => {
    const plant = {
        id: uuid(),
        stress: Math.floor(Math.random() * 30),
        status: 'healthy',
        ...props,
    };
    plant.harvestable = plant.progress >= 65;
    return plant;
};

const getStructureYield = (structure) => {
    if (!structure) return 0;
    return structure.rooms.reduce((roomSum, room) => {
        return roomSum + room.zones.reduce((zoneSum, zone) => zoneSum + (zone.estYield || 0), 0);
    }, 0);
};


// --- MOCK DATA based on Vision & Scope ---
const DEVICE_COSTS = {
    'ClimateKing 5000': 1200,
    'Sunstream Pro LED': 850,
    'CO₂ Injector v2': 450,
    'HydroFlow Irrigator': 600,
};

const initialMockData = {
  globalStats: {
    time: "Day 7, 14:00 (Tick 158)",
    balance: 99875420,
    dailyOpex: 12450,
    water: "1,500 L",
  },
  structures: [
    {
      id: 'struct-1',
      name: "Medium Warehouse 1",
      footprint: { width: 100, length: 50, height: 10 }, // in meters
      totalArea: 5000,
      usedArea: 400,
      dailyCost: 1850,
      rooms: [
        {
          id: 'room-1',
          name: "Grow Room A",
          purpose: 'growroom',
          area: 200,
          zones: [
            {
              id: 'zone-1',
              name: 'Zone A1',
              method: 'Sea of Green',
              area: 50,
              maxPlants: 20,
              strain: 'OG Kush',
              phase: 'Flowering (Day 23)',
              estYield: 25, // g/day
              stress: 0.15, // 0 to 1
              kpis: [
                { title: 'PPFD', value: '882', unit: 'µmol/m²/s', target: 900, status: 'optimal' },
                { title: 'VPD', value: '1.2', unit: 'kPa', target: 1.1, status: 'warning' },
              ],
              plants: [
                  ...Array(10).fill(0).map(() => createPlant({ name: 'OG Kush', health: 95, progress: 60 })),
                  createPlant({ name: 'OG Kush', health: 98, progress: 70 }),
                  createPlant({ name: 'OG Kush', health: 99, progress: 72 }),
                  createPlant({ name: 'OG Kush', health: 80, progress: 68, status: 'pest' }),
                  createPlant({ name: 'OG Kush', health: 75, progress: 66, status: 'disease' }),
                  createPlant({ name: 'White Widow', health: 85, progress: 75, status: 'treatment' }),
                  createPlant({ name: 'White Widow', health: 90, progress: 80, status: 'healthy' }),
              ],
              devices: [
                  { id: uuid(), name: 'ClimateKing 5000', type: 'HVAC' },
                  { id: uuid(), name: 'ClimateKing 5000', type: 'HVAC' },
                  { id: uuid(), name: 'Sunstream Pro LED', type: 'Lighting' },
                  { id: uuid(), name: 'Sunstream Pro LED', type: 'Lighting' },
                  { id: uuid(), name: 'Sunstream Pro LED', type: 'Lighting' },
                  { id: uuid(), name: 'CO₂ Injector v2', type: 'Climate' },
              ],
              controls: {
                temperature: { value: 24.5, min: 15, max: 35, target: 25 },
                humidity: { value: 52, min: 30, max: 80, target: 50 },
                co2: { value: 1150, min: 400, max: 2000, target: 1200 },
                light: { power: 98, on: true, cycle: '12h/12h' }
              },
            },
            {
              id: 'zone-2',
              name: 'Zone A2',
              method: 'SCROG',
              area: 50,
              maxPlants: 15,
              strain: 'White Widow',
              phase: 'Flowering (Day 19)',
              estYield: 18,
              stress: 0.25,
               kpis: [
                { title: 'PPFD', value: '0', unit: 'µmol/m²/s', target: 900, status: 'danger' },
                { title: 'VPD', value: '1.1', unit: 'kPa', target: 1.1, status: 'optimal' },
              ],
              plants: Array(12).fill(0).map(() => createPlant({ name: 'White Widow', health: 92, progress: 55, status: 'healthy' })),
              devices: [
                  { id: uuid(), name: 'ClimateKing 5000', type: 'HVAC' },
                  { id: uuid(), name: 'CO₂ Injector v2', type: 'Climate' },
              ],
              controls: {
                temperature: { value: 23.1, min: 15, max: 35, target: 24 },
                humidity: { value: 55, min: 30, max: 80, target: 50 },
                co2: { value: 1250, min: 400, max: 2000, target: 1200 },
                light: { power: 0, on: false, cycle: '12h/12h' }
              },
            },
            { id: 'zone-3', name: 'Zone A3', method: 'Sea of Green', area: 100, maxPlants: 40, strain: 'Blue Dream', phase: 'Vegetative (Day 12)', devices: [], plants: Array(35).fill(0).map(()=> createPlant({name: 'Blue Dream', health: 98, progress: 30, status: 'healthy'})), estYield: 0, stress: 0.1 },
          ]
        },
        {
          id: 'room-2',
          name: "Grow Room B",
          purpose: 'growroom',
          area: 150,
          zones: [
             { id: 'zone-4', name: 'Zone B1', method: 'Sea of Green', area: 75, maxPlants: 30, strain: 'OG Kush', phase: 'Drying', devices: [], plants: [], estYield: 0, stress: 0 },
             { id: 'zone-5', name: 'Zone B2', method: 'Empty', area: 75, maxPlants: 0, strain: '-', phase: 'Cleaning', devices: [], plants: [], estYield: 0, stress: 0 },
          ]
        },
        { id: 'room-3', name: "Break Room", purpose: 'breakroom', area: 25, zones: [], occupancy: { current: 3 } },
        { 
          id: 'room-4', 
          name: "Processing Room", 
          purpose: 'processing', 
          area: 25, 
          zones: [],
          curingBatches: [
            { id: 'batch-1', strain: 'OG Kush', yield: 1250, thc: 22.5, cbd: 0.8, progress: 75 },
            { id: 'batch-2', strain: 'White Widow', yield: 980, thc: 19.2, cbd: 1.1, progress: 40 },
          ]
        },
      ]
    },
  ],
  availableStructures: [
    { id: 's_warehouse', name: 'Small Warehouse', totalArea: 1000, footprint: { width: 50, length: 20, height: 8 }, cost: 5000000 },
    { id: 'm_warehouse', name: 'Medium Warehouse', totalArea: 5000, footprint: { width: 100, length: 50, height: 10 }, cost: 20000000 },
    { id: 'l_warehouse', name: 'Large Warehouse', totalArea: 20000, footprint: { width: 200, length: 100, height: 12 }, cost: 75000000 },
  ],
  employees: [
      { id: uuid(), name: 'Alice', desiredRole: 'Gardener', assignment: 'struct-1', skills: { 'Cultivation': 4, 'Pest Control': 3 }, traits: ['Hard Worker'], expectedSalary: 34000 },
      { id: uuid(), name: 'Bob', desiredRole: 'Technician', assignment: 'struct-1', skills: { 'Mechanics': 5, 'Electronics': 4 }, traits: ['Detail-Oriented'], expectedSalary: 42000 },
  ],
  candidates: generateCandidates(),
  finance: {
      netIncome7d: 191920,
      opex7d: 90650,
      capex7d: 325000,
      revenue: {
          total: 282570,
          breakdown: [
              { item: 'OG Kush Batch #28', amount: 150200 },
              { item: 'White Widow Batch #14', amount: 87270 },
              { item: 'Blue Dream Batch #5', amount: 45100 },
              { item: 'Genetics Licensing', amount: 12000 },
          ]
      },
      opex: {
          total: 90650,
          breakdown: [
              { item: 'Labor', amount: 53200 },
              { item: 'Utilities', amount: 18500 },
              { item: 'Supplies', amount: 9800 },
              { item: 'Maintenance', amount: 5650 },
              { item: 'Insurance', amount: 3500 },
          ]
      },
      capex: {
          total: 325000,
          breakdown: [
              { item: 'Structure Rental', amount: 150000 },
              { item: 'Device Purchases', amount: 100000 },
              { item: 'Research Equipment', amount: 75000 },
          ]
      }
  },
  events: [
    { time: '13:45', message: 'Nutrient reservoir in Zone A1 refilled.', type: 'info' },
    { time: '13:10', message: 'Humidity in Zone A1 exceeds target by 2%. Dehumidifier activated.', type: 'warning' },
    { time: '12:00', message: 'Shift change completed. 4 gardeners now on duty.', type: 'info' },
    { time: '11:30', message: 'Technician completed maintenance on Climate Unit in Grow Room A.', type: 'success' },
  ],
};

// --- GOOGLE MATERIAL ICONS ---
const ClockIcon = () => <span className="material-icons-outlined align-middle text-2xl">schedule</span>;
const DollarIcon = () => <span className="material-icons-outlined align-middle text-2xl">paid</span>;
const BoltIcon = () => <span className="material-icons-outlined align-middle text-2xl">electric_bolt</span>;
const DropletIcon = () => <span className="material-icons-outlined align-middle text-2xl">water_drop</span>;
const ChevronDownIcon = () => <span className="material-icons-outlined align-middle text-xl">expand_more</span>;
const ThermometerIcon = () => <span className="material-icons-outlined align-middle text-2xl">thermostat</span>;
const SunIcon = () => <span className="material-icons-outlined align-middle text-xl">light_mode</span>;
const WindIcon = () => <span className="material-icons-outlined align-middle text-2xl">air</span>;
const PowerIcon = () => <span className="material-icons-outlined align-middle text-2xl">power_settings_new</span>;
const PlusIcon = () => <span className="material-icons-outlined align-middle text-xl">add</span>;
const PlayIcon = () => <span className="material-icons-outlined align-middle text-3xl">play_circle</span>;
const PauseIcon = () => <span className="material-icons-outlined align-middle text-3xl">pause_circle</span>;
const ForwardIcon = () => <span className="material-icons-outlined align-middle text-xl">fast_forward</span>;
const CogIcon = () => <span className="material-icons-outlined align-middle text-3xl">settings</span>;
const XIcon = () => <span className="material-icons-outlined align-middle text-2xl">close</span>;
const ChevronRightIcon = ({ className }: { className?: string }) => <span className={`material-icons-outlined align-middle text-xl ${className || ''}`}>chevron_right</span>;
const StoreIcon = () => <span className="material-icons-outlined align-middle text-2xl">storefront</span>;
const DeleteIcon = () => <span className="material-icons-outlined align-middle text-lg">delete</span>;
const TrashIcon = () => <span className="material-icons-outlined align-middle">delete_outline</span>;
const LightCycleIcon = () => <span className="material-icons-outlined align-middle text-2xl">schedule</span>;
const WbSunnyIcon = () => <span className="material-icons-outlined align-middle text-xl">wb_sunny</span>;
const NightlightIcon = () => <span className="material-icons-outlined align-middle text-xl">nightlight</span>;
const HomeIcon = () => <span className="material-icons-outlined align-middle text-3xl">home_work</span>;
const GroupIcon = () => <span className="material-icons-outlined align-middle text-xl">group</span>;
const BadgeIcon = () => <span className="material-icons-outlined align-middle text-3xl">badge</span>;
const BugIcon = () => <span className="material-icons-outlined text-base">bug_report</span>;
const SickIcon = () => <span className="material-icons-outlined text-base">sick</span>;
const HealingIcon = () => <span className="material-icons-outlined text-base">healing</span>;
const HarvestIcon = ({ className = '' }) => <span className={`material-icons-outlined align-middle ${className}`}>grass</span>;
const CheckIcon = () => <span className="material-icons-outlined">check_circle</span>;
const DuplicateIcon = () => <span className="material-icons-outlined align-middle text-lg">content_copy</span>;


// --- COMPONENTS ---

const InlineEdit = ({ value, onSave, className }) => {
    const [isEditing, setIsEditing] = useState(false);
    const [text, setText] = useState(value);
    const inputRef = useRef(null);

    const handleSave = () => {
        if (text.trim() && text !== value) {
            onSave(text);
        } else {
            setText(value); // Reset if empty or unchanged
        }
        setIsEditing(false);
    };

    const handleKeyDown = (e) => {
        if (e.key === 'Enter') {
            handleSave();
        } else if (e.key === 'Escape') {
            setText(value);
            setIsEditing(false);
        }
    };
    
    useEffect(() => {
        if (isEditing && inputRef.current) {
            inputRef.current.focus();
            inputRef.current.select();
        }
    }, [isEditing]);

    const startEditing = (e) => {
        e.stopPropagation();
        setIsEditing(true);
    };

    if (isEditing) {
        return (
            <input
                ref={inputRef}
                type="text"
                value={text}
                onChange={(e) => setText(e.target.value)}
                onBlur={handleSave}
                onKeyDown={handleKeyDown}
                className={`bg-stone-700 border border-lime-500 rounded-md outline-none ${className}`}
                onClick={(e) => e.stopPropagation()}
            />
        );
    }

    return (
        <span onClick={startEditing} className={`cursor-pointer hover:bg-stone-700/50 p-1 -m-1 rounded-md transition-colors ${className}`}>
            {value}
        </span>
    );
};


const Modal = ({ title, children, onClose }) => (
    <div className="fixed inset-0 bg-black/70 backdrop-blur-sm flex items-center justify-center z-50" role="dialog" aria-modal="true">
        <div className="bg-stone-800 border border-stone-700 rounded-lg shadow-xl w-full max-w-md m-4">
            <header className="flex items-center justify-between p-4 border-b border-stone-700">
                <h2 className="text-lg font-semibold text-stone-100">{title}</h2>
                <button onClick={onClose} className="text-stone-400 hover:text-stone-100 transition-colors" aria-label="Close modal"><XIcon /></button>
            </header>
            <div className="p-6">{children}</div>
        </div>
    </div>
);

const FormInput = ({ label, ...props }) => (
    <div>
        <label className="block text-sm font-medium text-stone-300 mb-1">{label}</label>
        <input className="w-full bg-stone-900 border border-stone-700 rounded-md px-3 py-2 text-stone-100 focus:ring-2 focus:ring-lime-500 focus:border-lime-500 outline-none" {...props} />
    </div>
);

const FormSelect = ({ label, children, ...props }) => (
    <div>
        <label className="block text-sm font-medium text-stone-300 mb-1">{label}</label>
        <select className="w-full bg-stone-900 border border-stone-700 rounded-md px-3 py-2 text-stone-100 focus:ring-2 focus:ring-lime-500 focus:border-lime-500 outline-none" {...props}>{children}</select>
    </div>
);

const FormCheckbox = ({ label, ...props }) => (
    <label className="flex items-center space-x-2 text-sm text-stone-300">
        <input type="checkbox" className="h-4 w-4 rounded bg-stone-700 border-stone-600 text-lime-600 focus:ring-lime-500" {...props} />
        <span>{label}</span>
    </label>
);

const PrimaryButton = ({ children, ...props }) => (
    <button className="w-full bg-lime-600 hover:bg-lime-700 text-white font-semibold py-2 px-4 rounded-md transition-colors disabled:bg-stone-600 disabled:cursor-not-allowed" {...props}>{children}</button>
);

const DangerButton = ({ children, ...props }) => (
    <button className="w-full bg-red-600 hover:bg-red-700 text-white font-semibold py-2 px-4 rounded-md transition-colors" {...props}>{children}</button>
);


const StatCard = ({ icon, title, value, unit, color }) => (
  <div className="flex items-center space-x-3 p-3 bg-stone-800/50 rounded-lg">
    <div className={`text-${color}-400`}>{icon}</div>
    <div>
      <div className="text-sm text-stone-400">{title}</div>
      <div className="text-lg font-semibold text-stone-100">{value} <span className="text-sm text-stone-400">{unit}</span></div>
    </div>
  </div>
);

const Dashboard = ({ stats, onOpenModal, isPlaying, gameSpeed, onTogglePlay, onChangeSpeed, onNavigate }) => (
  <header className="flex-shrink-0 bg-stone-900/70 backdrop-blur-sm border-b border-stone-700 p-3">
    <div className="container mx-auto flex justify-between items-center">
        {/* LEFT: Controls */}
        <div className="flex items-center space-x-2 bg-stone-800/50 p-1 rounded-lg">
            <button
                onClick={onTogglePlay}
                className={`p-2 rounded-md transition-colors hover:bg-stone-700 ${isPlaying ? 'text-yellow-400' : 'text-green-400'}`}
                aria-label={isPlaying ? 'Pause game' : 'Play game'}
            >
                {isPlaying ? <PauseIcon /> : <PlayIcon />}
            </button>
            <select
                value={gameSpeed}
                onChange={(e) => onChangeSpeed(e.target.value)}
                className="bg-transparent border-none rounded-md px-2 py-2 text-stone-100 font-semibold focus:ring-0 outline-none"
                aria-label="Game speed"
            >
                <option value="0.5x">0.5x</option>
                <option value="1x">1x</option>
                <option value="10x">10x</option>
                <option value="25x">25x</option>
                <option value="100x">100x</option>
            </select>
        </div>
        
        {/* CENTER: Nav & Stats */}
        <div className="flex-grow flex justify-center items-center space-x-6">
            <button onClick={() => onNavigate('dashboard')} className="flex items-center space-x-2 p-2 text-stone-400 hover:text-stone-100 rounded-lg" aria-label="Structures">
                <HomeIcon /> <span>Structures</span>
            </button>
            <button onClick={() => onNavigate('personnel')} className="flex items-center space-x-2 p-2 text-stone-400 hover:text-stone-100 rounded-lg" aria-label="Personnel">
                <BadgeIcon /> <span>Personnel</span>
            </button>
            <button onClick={() => onNavigate('finance')} className="flex items-center space-x-2 p-2 text-stone-400 hover:text-stone-100 rounded-lg" aria-label="Finances">
                 <span className="material-icons-outlined align-middle text-3xl">paid</span> <span>Finances</span>
            </button>

            <div className="h-12 border-l border-stone-700 mx-2"></div>

            <StatCard icon={<ClockIcon />} title="Game Time" value={stats.time} unit="" color="cyan" />
            <StatCard icon={<DollarIcon />} title="Balance" value={stats.balance.toLocaleString()} unit="€" color="green" />
        </div>

        {/* RIGHT: Settings */}
        <button onClick={() => onOpenModal('gameMenu')} className="p-2 text-stone-400 hover:text-stone-100 rounded-lg" aria-label="Game Menu"><CogIcon /></button>
    </div>
  </header>
);

const Sidebar = ({ structures, selection, onNavigate, onOpenModal }) => {
    const selectedStructure = structures.find(s => s.id === selection.structureId);

    return (
        <aside className="w-80 flex-shrink-0 bg-stone-800/50 p-4 border-r border-stone-700 overflow-y-auto space-y-4">
            {!selectedStructure ? (
                 <div className="text-center text-stone-500 p-4 mt-4">
                    <p>Select a structure from the dashboard to see its rooms.</p>
                </div>
            ) : (
                <div>
                    <div className="flex justify-between items-center mb-2">
                      <button onClick={() => onNavigate('structure', selectedStructure.id)} className="text-lg font-semibold text-stone-300 hover:text-lime-400 transition-colors">
                          {selectedStructure.name}
                      </button>
                      <button onClick={() => onOpenModal('addRoom', { structureId: selectedStructure.id })} className="text-stone-400 hover:text-stone-100" aria-label="Add Room"><PlusIcon/></button>
                    </div>
                    <nav>
                      <ul>
                        {selectedStructure.rooms.map(room => (
                          <li key={room.id} className="mb-2">
                            <div className="flex items-center justify-between text-stone-400 group">
                                <button onClick={() => onNavigate('room', room.id, selectedStructure.id)} className="flex items-center flex-grow text-left p-1 rounded-md hover:bg-stone-700/50 transition-colors">
                                   <ChevronDownIcon />
                                   <span className="ml-1 font-semibold">{room.name}</span>
                                   <span className="ml-2 text-xs text-stone-500">({room.area}m²)</span>
                                </button>
                                {room.purpose === 'growroom' && (
                                <button onClick={() => onOpenModal('addZone', { roomId: room.id })} className="text-stone-400 hover:text-stone-100 p-1" aria-label="Add Zone"><PlusIcon/></button>
                                )}
                            </div>
                            {room.zones.length > 0 && (
                              <ul className="mt-1 ml-4 pl-2 border-l border-stone-600">
                                {room.zones.map(zone => (
                                  <li key={zone.id}>
                                    <button
                                      onClick={() => onNavigate('zone', zone.id, room.id, selectedStructure.id)}
                                      className={`w-full text-left px-2 py-1.5 rounded-md text-sm transition-colors ${(selection.zoneId === zone.id && selection.roomId === room.id) ? 'bg-lime-600/30 text-lime-300' : 'hover:bg-stone-700/50'}`}
                                      aria-current={selection.zoneId === zone.id}
                                    >
                                      {zone.name} <span className="text-xs text-stone-500">{zone.method ? `(${zone.method})` : ''}</span>
                                    </button>
                                  </li>
                                ))}
                              </ul>
                            )}
                          </li>
                        ))}
                      </ul>
                    </nav>
                </div>
            )}
        </aside>
    );
};

const ToggleSwitch = ({ icon, label, enabled, onChange, color, disabled = false }) => (
    <div className={`flex items-center justify-between py-2 ${disabled ? 'opacity-50 cursor-not-allowed' : ''}`}>
        <div className="flex items-center space-x-3 text-stone-300">
            <span className={`text-${color}-400`}>{icon}</span>
            <span>{label}</span>
        </div>
        <button
            onClick={onChange}
            disabled={disabled}
            className={`relative inline-flex items-center h-6 rounded-full w-11 transition-colors ${enabled ? `bg-${color}-500` : 'bg-stone-600'} ${disabled ? 'cursor-not-allowed' : ''}`}
            role="switch"
            aria-checked={enabled}
        >
            <span className={`inline-block w-4 h-4 transform bg-white rounded-full transition-transform ${enabled ? 'translate-x-6' : 'translate-x-1'}`} />
        </button>
    </div>
);

const LightCycleSlider = ({ value, onChange, disabled = false }) => {
    const [litHours, setLitHours] = useState(() => parseInt(value.split('h/')[0], 10));

    const handleChange = (e) => {
        const newLitHours = parseInt(e.target.value, 10);
        setLitHours(newLitHours);
        onChange(`${newLitHours}h/${24 - newLitHours}h`);
    };
    
    return (
        <div className={`space-y-2 py-2 ${disabled ? 'opacity-50 cursor-not-allowed' : ''}`}>
             <div className="flex justify-between items-center text-stone-300">
                <div className="flex items-center space-x-3">
                    <span className="text-cyan-400"><LightCycleIcon/></span>
                    <span>Light Cycle</span>
                </div>
                 <div className="font-semibold text-stone-100">{litHours}h <span className="text-stone-500">/</span> {24 - litHours}h</div>
            </div>
            <div className="flex items-center space-x-2">
                <span className="text-yellow-400"><NightlightIcon/></span>
                <input
                    type="range"
                    min={0}
                    max={24}
                    step={1}
                    value={litHours}
                    onChange={handleChange}
                    disabled={disabled}
                    className={`w-full h-2 bg-stone-700 rounded-lg appearance-none ${disabled ? 'cursor-not-allowed' : 'cursor-pointer'}`}
                />
                <span className="text-yellow-400"><WbSunnyIcon/></span>
            </div>
        </div>
    );
};

const EnvironmentControlRow = ({ icon, label, value, unit, min, max, step, target, tolerance, color, onChange, disabled = false }) => {
    const isOptimal = Math.abs(value - target) <= tolerance;
    const valueColor = isOptimal ? 'text-green-400' : 'text-yellow-400';

    return (
        <div className={`py-2 ${disabled ? 'opacity-50 cursor-not-allowed' : ''}`}>
            <div className="flex justify-between items-center">
                <div className="flex items-center space-x-3 text-stone-300">
                    <span className={`text-${color}-400`}>{icon}</span>
                    <span>{label}</span>
                </div>
                <div className={`font-semibold ${valueColor}`}>{value.toFixed(label === 'Temperature' ? 1 : 0)} <span className="text-stone-400">{unit}</span></div>
            </div>
            <input
                type="range"
                min={min}
                max={max}
                step={step}
                value={value}
                onChange={onChange}
                disabled={disabled}
                className={`w-full h-2 bg-stone-700 rounded-lg appearance-none mt-2 ${disabled ? 'cursor-not-allowed' : 'cursor-pointer'}`}
            />
        </div>
    );
};

const MetricDisplayRow = ({ icon, title, value, unit, status }) => {
    const statusColors = { optimal: 'text-green-400', warning: 'text-yellow-400', danger: 'text-red-400' };
    return (
        <div className="flex items-center justify-between py-2 text-stone-300">
             <div className="flex items-center space-x-3">
                {icon}
                <span>{title}</span>
            </div>
            <div className={`font-semibold ${statusColors[status] || 'text-stone-100'}`}>{value} <span className="text-stone-400">{unit}</span></div>
        </div>
    )
}

const EnvironmentPanel = ({ zone, onUpdate }) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const { controls, devices = [], id: zoneId, kpis = [] } = zone;

  const hasDevice = (type) => devices.some(d => d.type === type);
  
  const hasHVAC = hasDevice('HVAC');
  const hasClimate = hasDevice('Climate');
  const hasLighting = hasDevice('Lighting');
  
  const ppfd = kpis.find(k => k.title === 'PPFD');
  const vpd = kpis.find(k => k.title === 'VPD');
  
  const isTempOptimal = Math.abs(controls.temperature.value - controls.temperature.target) <= 1;
  const isHumidityOptimal = Math.abs(controls.humidity.value - controls.humidity.target) <= 5;

  if (!isExpanded) {
    return (
        <div className="bg-stone-800/30 rounded-lg">
            <button onClick={() => setIsExpanded(true)} className="w-full flex justify-between items-center p-6 text-left">
                <h3 className="text-xl font-semibold">Environment</h3>
                <div className="flex items-center gap-6 text-sm">
                    <div className={`flex items-center gap-1 ${!isTempOptimal ? 'text-yellow-400' : 'text-green-400'}`}><ThermometerIcon/> {controls.temperature.value.toFixed(1)}°C</div>
                    <div className={`flex items-center gap-1 ${!isHumidityOptimal ? 'text-yellow-400' : 'text-blue-400'}`}><DropletIcon/> {controls.humidity.value.toFixed(0)}%</div>
                    <div className="flex items-center gap-1 text-yellow-400"><SunIcon/> {ppfd?.value || 0} µmol</div>
                    <div className="flex items-center gap-1 text-cyan-400"><LightCycleIcon/> {controls.light.cycle}</div>
                    <ChevronRightIcon className="text-stone-400" />
                </div>
            </button>
        </div>
    );
  }

  return (
    <div className="bg-stone-800/30 rounded-lg">
        <button onClick={() => setIsExpanded(false)} className="w-full flex justify-between items-center p-6 text-left">
            <h3 className="text-xl font-semibold">Environment</h3>
            <ChevronDownIcon />
        </button>
        <div className="px-6 pb-6 pt-0">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-x-8">
            <div className="space-y-2">
                <EnvironmentControlRow icon={<ThermometerIcon/>} label="Temperature" value={controls.temperature.value} min={controls.temperature.min} max={controls.temperature.max} step="0.1" unit="°C" color="yellow" onChange={(e) => onUpdate(zoneId, 'temperature', parseFloat(e.target.value))} disabled={!hasHVAC} target={controls.temperature.target} tolerance={1} />
                <EnvironmentControlRow icon={<DropletIcon/>} label="Humidity" value={controls.humidity.value} min={controls.humidity.min} max={controls.humidity.max} step="1" unit="%" color="blue" onChange={(e) => onUpdate(zoneId, 'humidity', parseInt(e.target.value))} disabled={!hasHVAC} target={controls.humidity.target} tolerance={5}/>
                <EnvironmentControlRow icon={<WindIcon/>} label="CO₂" value={controls.co2.value} min={controls.co2.min} max={controls.co2.max} step="10" unit="ppm" color="gray" onChange={(e) => onUpdate(zoneId, 'co2', parseInt(e.target.value))} disabled={!hasClimate} target={controls.co2.target} tolerance={100}/>
            </div>
            <div className="space-y-2">
                <ToggleSwitch icon={<PowerIcon/>} label="Light System" enabled={controls.light.on} onChange={() => onUpdate(zoneId, 'lightState', !controls.light.on)} color="green" disabled={!hasLighting}/>
                <EnvironmentControlRow icon={<SunIcon/>} label="Light Power" value={controls.light.power} min={0} max={100} step="1" unit="%" color="yellow" onChange={(e) => onUpdate(zoneId, 'lightPower', parseInt(e.target.value))} disabled={!controls.light.on || !hasLighting} target={100} tolerance={100} />
                <LightCycleSlider value={controls.light.cycle} onChange={(val) => onUpdate(zoneId, 'lightCycle', val)} disabled={!hasLighting} />
                {ppfd && <MetricDisplayRow icon={<SunIcon/>} title={ppfd.title} value={ppfd.value} unit={ppfd.unit} status={ppfd.status}/>}
                {vpd && <MetricDisplayRow icon={<span className="material-icons-outlined text-purple-400 align-middle text-xl">science</span>} title={vpd.title} value={vpd.value} unit={vpd.unit} status={vpd.status}/>}
            </div>
          </div>
        </div>
    </div>
  );
};

const Breadcrumbs = ({ path, onNavigate }) => (
    <nav className="flex items-center text-sm text-stone-400 mb-4" aria-label="Breadcrumb">
        {path.map((item, index) => (
            <React.Fragment key={item.id}>
                {index > 0 && <ChevronRightIcon className="mx-1"/>}
                <button onClick={() => onNavigate(item.level, item.id, item.parentId, item.grandParentId)} className="hover:text-stone-100 transition-colors">{item.name}</button>
            </React.Fragment>
        ))}
    </nav>
);

const ZoneDeviceList = ({ devices, onOpenModal, zoneId }) => {
    const deviceGroups = useMemo(() => {
        return (devices || []).reduce((acc, device) => {
            const key = `${device.name}|${device.type}`;
            if (!acc[key]) {
                acc[key] = { ...device, count: 0, ids: [] };
            }
            acc[key].count++;
            acc[key].ids.push(device.id);
            return acc;
        }, {});
    }, [devices]);

    return (
        <div className="bg-stone-800/30 rounded-lg p-6 space-y-4">
             <div className="flex justify-between items-center">
                 <h3 className="text-xl font-semibold">Devices ({devices.length})</h3>
                  <button onClick={() => onOpenModal('addDevice', { zoneId })} className="bg-blue-600/50 hover:bg-blue-600 text-white text-sm font-semibold py-1 px-3 rounded-md transition-colors">Install Device</button>
             </div>
             <ul className="space-y-2">
                {Object.values(deviceGroups).map((device: any) => (
                    <li key={device.id} className="flex items-center justify-between bg-stone-700/40 p-2 rounded-md group">
                        <span className="text-sm">{device.name}</span>
                        <div className="flex items-center space-x-2">
                           <span className="text-xs text-stone-400">{device.type}</span>
                           {device.count > 1 && <span className="text-xs font-bold text-cyan-400 bg-cyan-900/50 px-1.5 py-0.5 rounded-full">x{device.count}</span>}
                           <button onClick={() => onOpenModal('removeDevice', { zoneId, device: device })} className="text-stone-500 hover:text-red-400 opacity-0 group-hover:opacity-100 transition-opacity"><DeleteIcon/></button>
                        </div>
                    </li>
                ))}
                {devices.length === 0 && <p className="text-sm text-stone-500 text-center py-4">No devices installed.</p>}
             </ul>
        </div>
    );
};

const PlantStatusIcon = ({ status }) => {
    switch (status) {
        case 'pest':
            return <div className="absolute top-1 right-1 text-red-500" title="Pest"><BugIcon /></div>;
        case 'disease':
            return <div className="absolute top-1 right-1 text-purple-500" title="Disease"><SickIcon /></div>;
        case 'treatment':
            return <div className="absolute top-1 right-1 text-blue-500" title="Treatment"><HealingIcon /></div>;
        default:
            return null;
    }
};

const BatchActionBar = ({ selectedCount, onHarvest, onTrash, onTreat }) => (
    <div className="bg-stone-700/50 p-2 rounded-md mb-4 flex justify-between items-center">
        <p className="text-sm font-semibold">{selectedCount} plant{selectedCount > 1 ? 's' : ''} selected</p>
        <div className="space-x-2">
            <button onClick={onHarvest} className="text-xs bg-green-600 hover:bg-green-700 text-white font-semibold py-1 px-2 rounded-md transition-colors">Harvest</button>
            <button onClick={onTrash} className="text-xs bg-red-600 hover:bg-red-700 text-white font-semibold py-1 px-2 rounded-md transition-colors">Trash</button>
            <button onClick={onTreat} className="text-xs bg-blue-600 hover:bg-blue-700 text-white font-semibold py-1 px-2 rounded-md transition-colors">Treat</button>
        </div>
    </div>
);

const ZonePlantPanel = ({ zone, onOpenModal, onBatchAction }) => {
    const [isExpanded, setIsExpanded] = useState(true);
    const [isSelectionMode, setIsSelectionMode] = useState(false);
    const [selectedPlantIds, setSelectedPlantIds] = useState(new Set());

    const strainSummary = useMemo(() => {
        if (!zone.plants || zone.plants.length === 0) return null;
        const counts = zone.plants.reduce((acc, plant) => {
            acc[plant.name] = (acc[plant.name] || 0) + 1;
            return acc;
        }, {});
        return Object.entries(counts).map(([name, count]) => `${name} (${count})`).join(', ');
    }, [zone.plants]);

    const handleToggleSelectionMode = () => {
        setIsSelectionMode(!isSelectionMode);
        setSelectedPlantIds(new Set());
    };

    const handleTogglePlantSelection = (plantId) => {
        setSelectedPlantIds(prev => {
            const newSet = new Set(prev);
            if (newSet.has(plantId)) {
                newSet.delete(plantId);
            } else {
                newSet.add(plantId);
            }
            return newSet;
        });
    };

    const handleBatchActionAndExit = (action) => {
        onBatchAction(zone.id, Array.from(selectedPlantIds), action);
        handleToggleSelectionMode();
    };

    return (
        <div className="bg-stone-800/30 rounded-lg">
            <button onClick={() => setIsExpanded(p => !p)} className="w-full flex justify-between items-center p-6 text-left">
                <div className="flex items-center gap-4">
                    <h3 className="text-xl font-semibold">Plants ({zone.plants.length})</h3>
                </div>
                {isExpanded ? <ChevronDownIcon /> : <ChevronRightIcon />}
            </button>
            {isExpanded && (
                <div className="px-6 pb-6 pt-0">
                    <div className="border-b border-stone-700 pb-4 mb-4">
                        {strainSummary && (
                            <div className="text-sm text-stone-400 mb-4">
                                <span className="font-semibold text-stone-300">Strains:</span> {strainSummary}
                            </div>
                        )}
                        <div className="flex justify-between items-end">
                            <div className="flex items-end space-x-4">
                                <FormSelect label="Sort by">
                                    <option>Health</option>
                                    <option>Progress</option>
                                    <option>Stress</option>
                                </FormSelect>
                                <FormSelect label="Filter by">
                                    <option>All</option>
                                    <option>Harvestable</option>
                                    <option>Sick</option>
                                    <option>Stressed</option>
                                </FormSelect>
                            </div>
                            <div className="space-x-2">
                                <button onClick={handleToggleSelectionMode} className="bg-blue-600/50 hover:bg-blue-600 text-white text-sm font-semibold py-2 px-3 rounded-md transition-colors">{isSelectionMode ? 'Cancel Selection' : 'Select Plants'}</button>
                                <button onClick={(e) => { e.stopPropagation(); onOpenModal('plantStrain', { zoneId: zone.id }); }} className="bg-green-600/50 hover:bg-green-600 text-white text-sm font-semibold py-2 px-3 rounded-md transition-colors">Plant New</button>
                            </div>
                        </div>
                    </div>
                    
                    {isSelectionMode && selectedPlantIds.size > 0 && (
                        <BatchActionBar 
                            selectedCount={selectedPlantIds.size}
                            onHarvest={() => handleBatchActionAndExit('harvest')}
                            onTrash={() => handleBatchActionAndExit('trash')}
                            onTreat={() => handleBatchActionAndExit('treat')}
                        />
                    )}

                    <div className="grid grid-cols-4 sm:grid-cols-6 md:grid-cols-8 lg:grid-cols-10 xl:grid-cols-16 gap-3">
                        {zone.plants.map((plant, index) => {
                            const isSelected = selectedPlantIds.has(plant.id);
                            return (
                                <div 
                                    key={plant.id} 
                                    className={`relative aspect-square flex items-center justify-center bg-stone-700/50 rounded-md group cursor-pointer transition-all
                                        ${isSelected ? 'border-2 border-green-500' : ''}
                                        ${isSelectionMode ? 'hover:bg-stone-700' : ''}
                                    `}
                                    title={`Plant ${index + 1} | ${plant.name} | Health: ${plant.health}% | Status: ${plant.status}`}
                                    onClick={() => isSelectionMode ? handleTogglePlantSelection(plant.id) : onOpenModal('plantDetail', { plant: plant, zoneId: zone.id })}
                                >
                                    {!isSelectionMode && <div className="absolute inset-0 bg-lime-500/30 rounded-md transition-opacity opacity-0 group-hover:opacity-100"></div>}
                                    <span className="material-icons-outlined text-lime-500 text-4xl">eco</span>
                                    <PlantStatusIcon status={plant.status} />
                                    {plant.harvestable && (
                                        <div className="absolute bottom-1 left-1 text-green-400" title="Harvestable">
                                            <HarvestIcon className="text-base" />
                                        </div>
                                    )}
                                    {isSelected && (
                                        <div className="absolute inset-0 bg-green-900/50 flex items-center justify-center rounded-md">
                                            <span className="text-green-400"><CheckIcon /></span>
                                        </div>
                                    )}
                                </div>
                            )
                        })}
                    </div>
                </div>
            )}
        </div>
    );
};

const ActionIcons = ({ onDuplicate, onDelete, className = '' }) => (
    <div className={`flex items-center space-x-1 ${className}`}>
        <button onClick={onDuplicate} className="p-1.5 bg-stone-800/80 hover:bg-blue-600 rounded-md text-stone-300 hover:text-white transition-colors" title="Duplicate"><DuplicateIcon /></button>
        <button onClick={onDelete} className="p-1.5 bg-stone-800/80 hover:bg-red-600 rounded-md text-stone-300 hover:text-white transition-colors" title="Delete"><DeleteIcon /></button>
    </div>
);

// FIX: Removed unused onDuplicate and onDelete props
const ZoneDetailView = ({ zone, onControlsChange, onOpenModal, onRename, onBatchAction }) => {
  const hasDetailedView = zone.controls && zone.plants;
  return (
    <div className="space-y-6">
      <div className="flex justify-between items-start">
        <div className="flex-grow">
            <InlineEdit
                value={zone.name}
                onSave={(newName) => onRename({ entityType: 'zone', entityId: zone.id, newName })}
                className="text-3xl font-bold text-stone-100"
            />
            <div className="flex items-center space-x-4 text-stone-400 mt-1">
                <span>{zone.method}</span>
                <span className="text-stone-600">|</span>
                <span>{zone.area} m²</span>
                <span className="text-stone-600">|</span>
                <span>{zone.plants.length} / {zone.maxPlants || 'N/A'} Plants</span>
            </div>
        </div>
        <ActionIcons 
            onDuplicate={(e) => { e.stopPropagation(); onOpenModal('duplicateZone', { zone }); }}
            onDelete={(e) => { e.stopPropagation(); onOpenModal('delete', { entityType: 'zone', entityId: zone.id, entityName: zone.name }); }}
        />
      </div>

      {!hasDetailedView ? (
         <div className="flex flex-col flex-1 items-center justify-center bg-stone-800/20 rounded-lg p-6 h-96">
            <p className="text-stone-500">No detailed data available for this zone.</p>
        </div>
      ) : (
        <>
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <div className="lg:col-span-2 space-y-6">
                    <EnvironmentPanel zone={zone} onUpdate={onControlsChange} />
                    <ZonePlantPanel zone={zone} onOpenModal={onOpenModal} onBatchAction={onBatchAction} />
                </div>
                <ZoneDeviceList devices={zone.devices} onOpenModal={onOpenModal} zoneId={zone.id} />
            </div>
        </>
      )}
    </div>
  );
};

const getZoneAvgProgress = (zone) => {
    if (!zone.plants || zone.plants.length === 0) return 0;
    const activePhases = ['flowering', 'vegetative'];
    const isInActivePhase = activePhases.some(p => zone.phase.toLowerCase().includes(p));
    if (!isInActivePhase) return 0;

    const totalProgress = zone.plants.reduce((sum, p) => sum + (p.progress || 0), 0);
    return totalProgress / zone.plants.length;
};

const ZoneCard = ({ zone, onClick, onOpenModal }) => {
    const avgProgress = getZoneAvgProgress(zone);

    return (
        <div className="bg-stone-700/50 rounded-lg text-left w-full flex flex-col overflow-hidden">
            <button onClick={onClick} className="p-4 w-full h-full text-left hover:bg-stone-700/50 transition-colors flex-grow">
                <div className="flex-grow">
                    <p className="font-semibold">{zone.name}</p>
                    <p className="text-xs text-stone-400">{zone.strain} - {zone.phase}</p>
                    <p className="text-xs text-stone-400">{zone.method}</p>
                </div>
                {avgProgress > 0 && (
                   <div className="pt-2 mt-auto">
                     <div className="w-full bg-stone-600 rounded-full h-1.5">
                        <div className="bg-lime-500 h-1.5 rounded-full" style={{ width: `${avgProgress}%` }}></div>
                     </div>
                   </div>
                )}
            </button>
            <div className="border-t border-stone-600/50">
                <ActionIcons 
                    className="p-2 justify-end"
                    onDuplicate={(e) => { e.stopPropagation(); onOpenModal('duplicateZone', { zone }); }}
                    onDelete={(e) => { e.stopPropagation(); onOpenModal('delete', { entityType: 'zone', entityId: zone.id, entityName: zone.name }); }}
                />
            </div>
        </div>
    );
};

const RoomDetailView = ({ room, structure, onNavigate, onRename, onOpenModal }) => {
    return (
        <div className="space-y-6">
            <div className="flex justify-between items-start">
                 <div className="flex-grow">
                    <InlineEdit
                        value={room.name}
                        onSave={(newName) => onRename({ entityType: 'room', entityId: room.id, newName })}
                        className="text-3xl font-bold text-stone-100"
                    />
                    <div className="flex items-center space-x-4 text-stone-400 mt-1">
                        <span>Purpose: {room.purpose}</span>
                        <span className="text-stone-600">|</span>
                        <span>Area: {room.area} m²</span>
                    </div>
                </div>
                <ActionIcons 
                    onDuplicate={(e) => { e.stopPropagation(); onOpenModal('duplicateRoom', { room }); }}
                    onDelete={(e) => { e.stopPropagation(); onOpenModal('delete', { entityType: 'room', entityId: room.id, entityName: room.name }); }}
                />
            </div>
            <div className="bg-stone-800/30 rounded-lg p-6">
                 <h3 className="text-xl font-semibold text-stone-100 mb-4">Zones</h3>
                 <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
                    {room.zones.map(zone => (
                        <ZoneCard key={zone.id} zone={zone} onClick={() => onNavigate('zone', zone.id, room.id, structure.id)} onOpenModal={onOpenModal} />
                    ))}
                    {room.zones.length === 0 && <p className="text-sm text-stone-500 col-span-full text-center py-4">No zones created in this room.</p>}
                 </div>
            </div>
        </div>
    );
};


const StructureDetailView = ({ structure, onNavigate, onOpenModal, onRename }) => {
    const getRoomYield = (room) => room.zones.reduce((sum, zone) => sum + (zone.estYield || 0), 0);
    const getRoomAvgStress = (room) => {
        const zonesWithStress = room.zones.filter(z => z.stress !== undefined);
        if (zonesWithStress.length === 0) return 0;
        const totalStress = zonesWithStress.reduce((sum, zone) => sum + zone.stress, 0);
        return totalStress / zonesWithStress.length;
    };

    return (
        <div className="space-y-6">
            <div className="flex items-baseline space-x-2">
                 <InlineEdit
                    value={structure.name}
                    onSave={(newName) => onRename({ entityType: 'structure', entityId: structure.id, newName })}
                    className="text-3xl font-bold text-stone-100"
                />
                 <h2 className="text-3xl font-bold text-stone-100">Overview</h2>
            </div>
            <div className="space-y-8">
                {structure.rooms.map(room => (
                    <div key={room.id} className="bg-stone-800/30 rounded-lg flex flex-col">
                        <div className="flex-grow">
                            <div className="p-6 cursor-pointer hover:bg-stone-700/20" onClick={() => onNavigate('room', room.id, structure.id)}>
                                <div className="flex justify-between items-center">
                                    <InlineEdit
                                        value={room.name}
                                        onSave={(newName) => onRename({ entityType: 'room', entityId: room.id, newName })}
                                        className="text-xl font-semibold text-stone-100"
                                    />
                                    {room.purpose === 'growroom' && (
                                         <div className="flex space-x-4 text-sm">
                                            <span>Est. Yield: <span className="font-bold text-green-400">{getRoomYield(room)} g/day</span></span>
                                            <span>Avg. Stress: <span className="font-bold text-yellow-400">{(getRoomAvgStress(room) * 100).toFixed(0)}%</span></span>
                                        </div>
                                    )}
                                    {room.purpose === 'breakroom' && (
                                        <div className="flex items-center space-x-2 text-sm">
                                            <GroupIcon />
                                            <span>Occupancy: <span className="font-bold text-cyan-400">{room.occupancy?.current || 0} / {Math.floor(room.area / 4)}</span></span>
                                        </div>
                                    )}
                                </div>
                            </div>

                            {room.purpose === 'growroom' && (
                                 <div className="px-6 pb-6 border-t border-stone-700/50">
                                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 mt-4">
                                        {room.zones.map(zone => (
                                           <ZoneCard key={zone.id} zone={zone} onClick={() => onNavigate('zone', zone.id, room.id, structure.id)} onOpenModal={onOpenModal}/>
                                        ))}
                                        {room.zones.length === 0 && <p className="text-sm text-stone-500 col-span-full text-center py-4">No zones created in this room.</p>}
                                    </div>
                                </div>
                            )}
                            {room.purpose === 'processing' && (
                                 <div className="px-6 pb-6 border-t border-stone-700/50">
                                    <div className="space-y-3 mt-4">
                                        {room.curingBatches?.length > 0 ? (
                                            <ul className="space-y-3 text-sm">
                                                {room.curingBatches.map(batch => (
                                                    <li key={batch.id}>
                                                        <div className="flex justify-between items-center font-semibold">
                                                            <span className="text-stone-100">{batch.strain} ({batch.yield}g)</span>
                                                            <span className="text-stone-400">THC: {batch.thc}% | CBD: {batch.cbd}%</span>
                                                        </div>
                                                        <div className="w-full bg-stone-700 rounded-full h-2 mt-1.5">
                                                            <div className="bg-lime-500 h-2 rounded-full" style={{ width: `${batch.progress}%` }}></div>
                                                        </div>
                                                        <p className="text-xs text-right text-stone-500 mt-1">{batch.progress}% Cured</p>
                                                    </li>
                                                ))}
                                            </ul>
                                        ) : (
                                            <p className="text-sm text-stone-500 text-center py-4">No batches currently processing.</p>
                                        )}
                                    </div>
                                </div>
                            )}
                        </div>
                        <div className="border-t border-stone-700/50">
                             <ActionIcons 
                                className="p-2 justify-end"
                                onDuplicate={(e) => { e.stopPropagation(); onOpenModal('duplicateRoom', { room }); }}
                                onDelete={(e) => { e.stopPropagation(); onOpenModal('delete', { entityType: 'room', entityId: room.id, entityName: room.name }); }}
                            />
                        </div>
                    </div>
                ))}
            </div>
        </div>
    );
};


const DashboardView = ({ structures, onNavigate, onOpenModal, onRename }) => {
    return (
        <div className="space-y-6">
            <div className="flex justify-between items-center">
                <h2 className="text-3xl font-bold text-stone-100">Structures Dashboard</h2>
                <button onClick={() => onOpenModal('rentStructure')} className="flex items-center space-x-2 bg-lime-600 hover:bg-lime-700 text-white font-semibold py-2 px-4 rounded-md transition-colors">
                    <StoreIcon />
                    <span>Rent New Structure</span>
                </button>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
                {structures.map(structure => (
                    <div key={structure.id} className="bg-stone-800/30 rounded-lg p-6 flex flex-col justify-between">
                        <div>
                            <InlineEdit
                                value={structure.name}
                                onSave={(newName) => onRename({ entityType: 'structure', entityId: structure.id, newName })}
                                className="text-xl font-semibold text-stone-100 mb-2 block"
                            />
                            <div className="space-y-1 text-sm text-stone-400">
                                <p>Area: <span className="font-semibold text-stone-200">{structure.usedArea} / {structure.totalArea} m²</span></p>
                                <p>Est. Yield: <span className="font-semibold text-green-400">{getStructureYield(structure)} g/day</span></p>
                                <p>Daily Cost: <span className="font-semibold text-yellow-400">{structure.dailyCost.toLocaleString()} €</span></p>
                            </div>
                        </div>
                        <button onClick={() => onNavigate('structure', structure.id)} className="mt-4 w-full bg-lime-600/20 hover:bg-lime-600/40 text-lime-300 py-2 rounded-md transition-colors">
                            View Details
                        </button>
                    </div>
                ))}
            </div>
        </div>
    );
};

const SkillRating = ({ level }) => (
    <div className="flex space-x-1">
        {[...Array(5)].map((_, i) => (
            <div key={i} className={`h-2 w-4 rounded-full ${i < level ? 'bg-lime-500' : 'bg-stone-600'}`} />
        ))}
    </div>
);

const CandidateCard = ({ candidate, onHire }) => (
    <div className="bg-stone-800/50 rounded-lg p-4 flex flex-col justify-between">
        <div>
            <h4 className="font-bold text-lg text-stone-100">{candidate.name}</h4>
            <p className="text-sm text-lime-400">{candidate.desiredRole}</p>
            <p className="text-sm text-stone-400 mt-1">Salary: {candidate.expectedSalary.toLocaleString()} € / year</p>

            <div className="my-3 space-y-2">
                <h5 className="text-xs font-semibold text-stone-400">Skills</h5>
                {Object.entries(candidate.skills).map(([skill, level]) => (
                    <div key={skill} className="flex justify-between items-center text-sm">
                        <span>{skill}</span>
                        <SkillRating level={level as number} />
                    </div>
                ))}
            </div>

            {candidate.traits.length > 0 && (
                <div className="space-x-2">
                    {candidate.traits.map(trait => <span key={trait} className="text-xs bg-cyan-900/50 text-cyan-300 px-2 py-1 rounded-full">{trait}</span>)}
                </div>
            )}
        </div>
        <button onClick={() => onHire(candidate)} className="mt-4 w-full bg-lime-600 hover:bg-lime-700 text-white font-semibold py-2 rounded-md transition-colors text-sm">
            Hire
        </button>
    </div>
);

const EmployeeCard = ({ employee, structureName, onFire }) => (
     <div className="bg-stone-800/50 rounded-lg p-4 flex flex-col justify-between">
        <div>
            <div className="flex justify-between items-start">
                <div>
                    <h4 className="font-bold text-lg text-stone-100">{employee.name}</h4>
                    <p className="text-sm text-lime-400">{employee.desiredRole}</p>
                </div>
                <button onClick={() => onFire(employee.id)} className="text-stone-500 hover:text-red-400"><DeleteIcon /></button>
            </div>
            <p className="text-sm text-stone-400 mt-1">Salary: {employee.expectedSalary.toLocaleString()} € / year</p>
             <p className="text-xs text-stone-500 mt-1">Assigned: {structureName}</p>

            <div className="my-3 space-y-2">
                <h5 className="text-xs font-semibold text-stone-400">Skills</h5>
                {Object.entries(employee.skills).map(([skill, level]) => (
                    <div key={skill} className="flex justify-between items-center text-sm">
                        <span>{skill}</span>
                        <SkillRating level={level as number} />
                    </div>
                ))}
            </div>

            {employee.traits.length > 0 && (
                <div className="space-x-2">
                    {employee.traits.map(trait => <span key={trait} className="text-xs bg-cyan-900/50 text-cyan-300 px-2 py-1 rounded-full">{trait}</span>)}
                </div>
            )}
        </div>
    </div>
);


const PersonnelView = ({ gameData, onOpenModal, onRefreshCandidates, onFireEmployee }) => {
    const [activeTab, setActiveTab] = useState('market');

    return (
        <div className="space-y-6">
            <h2 className="text-3xl font-bold text-stone-100">Personnel Management</h2>
            
            <div className="flex border-b border-stone-700">
                <button 
                    onClick={() => setActiveTab('market')} 
                    className={`px-4 py-2 text-sm font-semibold ${activeTab === 'market' ? 'border-b-2 border-lime-500 text-lime-400' : 'text-stone-400 hover:bg-stone-700/50'}`}
                >
                    Job Market ({gameData.candidates.length})
                </button>
                <button 
                    onClick={() => setActiveTab('staff')} 
                    className={`px-4 py-2 text-sm font-semibold ${activeTab === 'staff' ? 'border-b-2 border-lime-500 text-lime-400' : 'text-stone-400 hover:bg-stone-700/50'}`}
                >
                    Your Staff ({gameData.employees.length})
                </button>
            </div>

            {activeTab === 'market' && (
                <div>
                    <div className="flex justify-between items-center mb-4">
                        <p className="text-sm text-stone-400">Source: Offline Generator (Weekly Refresh)</p>
                        <button onClick={onRefreshCandidates} className="bg-blue-600/80 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded-md transition-colors text-sm">
                            Refresh Candidates
                        </button>
                    </div>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
                        {gameData.candidates.map(candidate => (
                            <CandidateCard key={candidate.id} candidate={candidate} onHire={(c) => onOpenModal('hireEmployee', { candidate: c })}/>
                        ))}
                    </div>
                </div>
            )}

            {activeTab === 'staff' && (
                 <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
                    {gameData.employees.map(employee => {
                        const structure = gameData.structures.find(s => s.id === employee.assignment);
                        return <EmployeeCard key={employee.id} employee={employee} structureName={structure?.name || 'Unassigned'} onFire={onFireEmployee}/>
                    })}
                 </div>
            )}
        </div>
    );
};

const CollapsibleCard = ({ title, total, children }) => {
    const [isExpanded, setIsExpanded] = useState(false);
    return (
        <div className="bg-stone-800/30 rounded-lg">
            <button onClick={() => setIsExpanded(p => !p)} className="w-full flex justify-between items-center p-4 text-left hover:bg-stone-700/20 rounded-t-lg transition-colors">
                <h3 className="text-xl font-semibold text-stone-100">{title}</h3>
                <div className="flex items-center space-x-4">
                    <span className="text-lg font-semibold text-stone-200">{total.toLocaleString()} €</span>
                    {isExpanded ? <ChevronDownIcon /> : <ChevronRightIcon />}
                </div>
            </button>
            {isExpanded && (
                <div className="p-4 border-t border-stone-700/50">
                    <ul className="space-y-2 text-sm">
                        {children}
                    </ul>
                </div>
            )}
        </div>
    );
};

const FinanceView = ({ gameData }) => {
    const { finance, globalStats } = gameData;
    const [timeRange, setTimeRange] = useState('1w');
    const timeRangeLabels = { '1d': '1D', '1w': '1W', '1m': '1M', '1y': '1Y' };
    const timeRangeFullLabels = { '1d': '1 Day', '1w': '1 Week', '1m': '1 Month', '1y': '1 Year' };


    const displayFinanceData = useMemo(() => {
        const timeMultipliers = {
            '1d': 1 / 7,
            '1w': 1,
            '1m': 30 / 7,
            '1y': 52,
        };
        const multiplier = timeMultipliers[timeRange];
        const base = finance;

        const scale = (value) => Math.round(value * multiplier);

        return {
            revenue: {
                total: scale(base.revenue.total),
                breakdown: base.revenue.breakdown.map(item => ({ ...item, amount: scale(item.amount) })),
            },
            opex: {
                total: scale(base.opex.total),
                breakdown: base.opex.breakdown.map(item => ({ ...item, amount: scale(item.amount) })),
            },
            capex: {
                total: scale(base.capex.total),
                breakdown: base.capex.breakdown.map(item => ({ ...item, amount: scale(item.amount) })),
            }
        };
    }, [finance, timeRange]);

    return (
        <div className="space-y-6">
            <h2 className="text-3xl font-bold text-stone-100">Financial Overview</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
                <StatCard icon={<DollarIcon />} title="Total Balance" value={globalStats.balance.toLocaleString()} unit="€" color="green" />
                <StatCard icon={<span className="material-icons-outlined align-middle text-2xl">trending_up</span>} title="Net Income (7d)" value={finance.netIncome7d.toLocaleString()} unit="€" color="cyan" />
                <StatCard icon={<span className="material-icons-outlined align-middle text-2xl">receipt_long</span>} title="OpEx (7d)" value={finance.opex7d.toLocaleString()} unit="€" color="yellow" />
                <StatCard icon={<span className="material-icons-outlined align-middle text-2xl">account_balance</span>} title="CapEx (7d)" value={finance.capex7d.toLocaleString()} unit="€" color="orange" />
            </div>

            <div className="flex justify-end items-center space-x-2">
                 {Object.keys(timeRangeLabels).map(key => (
                    <button
                        key={key}
                        onClick={() => setTimeRange(key)}
                        className={`px-3 py-1 text-sm font-semibold rounded-md transition-colors ${timeRange === key ? 'bg-lime-600 text-white' : 'bg-stone-700 hover:bg-stone-600 text-stone-300'}`}
                    >
                        {timeRangeLabels[key]}
                    </button>
                 ))}
            </div>

            <div className="space-y-4">
                <CollapsibleCard title={`Revenue (${timeRangeFullLabels[timeRange]})`} total={displayFinanceData.revenue.total}>
                    {displayFinanceData.revenue.breakdown.map((item, i) => (
                        <li key={i} className="flex justify-between p-2 rounded-md hover:bg-stone-700/30">
                            <span className="text-stone-300">{item.item}</span>
                            <span className="font-semibold text-green-400">{item.amount.toLocaleString()} €</span>
                        </li>
                    ))}
                </CollapsibleCard>
                <CollapsibleCard title={`Operational Expenses (${timeRangeFullLabels[timeRange]})`} total={displayFinanceData.opex.total}>
                     {displayFinanceData.opex.breakdown.map((item, i) => (
                        <li key={i} className="flex justify-between p-2 rounded-md hover:bg-stone-700/30">
                            <span className="text-stone-300">{item.item}</span>
                            <span className="font-semibold text-yellow-400">{item.amount.toLocaleString()} €</span>
                        </li>
                    ))}
                </CollapsibleCard>
                <CollapsibleCard title={`Capital Expenses (${timeRangeFullLabels[timeRange]})`} total={displayFinanceData.capex.total}>
                     {displayFinanceData.capex.breakdown.map((item, i) => (
                        <li key={i} className="flex justify-between p-2 rounded-md hover:bg-stone-700/30">
                            <span className="text-stone-300">{item.item}</span>
                            <span className="font-semibold text-orange-400">{item.amount.toLocaleString()} €</span>
                        </li>
                    ))}
                </CollapsibleCard>
            </div>
        </div>
    );
};


// FIX: Removed unused onDuplicate and onDelete props as they are not used downstream
const MainContent = ({ selection, gameData, onControlsChange, onOpenModal, onNavigate, onRename, onRefreshCandidates, onFireEmployee, onBatchAction }) => {
    const { structures } = gameData;
    const selectedStructure = structures.find(s => s.id === selection.structureId);
    
    let selectedRoom = null;
    if (selectedStructure && selection.roomId) {
        selectedRoom = selectedStructure.rooms.find(r => r.id === selection.roomId);
    }

    let selectedZone = null;
    if (selectedRoom && selection.zoneId) {
        selectedZone = selectedRoom.zones.find(z => z.id === selection.zoneId);
    }
    
    const breadcrumbPath = useMemo(() => {
        const path: { level: string; id: string; name: string; parentId?: string; grandParentId?: string }[] = [{ level: 'dashboard', id: 'dashboard', name: 'Structures' }];
        
        if (selection.view === 'personnel') {
            path.push({ level: 'personnel', id: 'personnel', name: 'Personnel' });
        } else if (selection.view === 'finance') {
            path.push({ level: 'finance', id: 'finance', name: 'Finances' });
        } else if (selectedStructure) {
            path[0].name = "Structures"; // Always have Structures as root
            path.push({ level: 'structure', id: selectedStructure.id, name: selectedStructure.name });
            if (selectedRoom) {
                path.push({ level: 'room', id: selectedRoom.id, name: selectedRoom.name, parentId: selectedStructure.id });
                if (selectedZone) {
                   path.push({ level: 'zone', id: selectedZone.id, name: selectedZone.name, parentId: selectedRoom.id, grandParentId: selectedStructure.id });
                }
            }
        }
        return path;
    }, [selection, structures]);

    const renderContent = () => {
        if (selection.view === 'personnel') {
            return <PersonnelView gameData={gameData} onOpenModal={onOpenModal} onRefreshCandidates={onRefreshCandidates} onFireEmployee={onFireEmployee}/>;
        }
        if (selection.view === 'finance') {
            return <FinanceView gameData={gameData} />;
        }
        if (selection.zoneId && selectedZone) {
            return <ZoneDetailView zone={selectedZone} onControlsChange={onControlsChange} onOpenModal={onOpenModal} onRename={onRename} onBatchAction={onBatchAction} />;
        }
        if (selection.roomId && selectedRoom) {
            return <RoomDetailView room={selectedRoom} structure={selectedStructure} onNavigate={onNavigate} onRename={onRename} onOpenModal={onOpenModal} />;
        }
        if (selection.structureId && selectedStructure) {
            return <StructureDetailView structure={selectedStructure} onNavigate={onNavigate} onOpenModal={onOpenModal} onRename={onRename} />;
        }
        return <DashboardView structures={structures} onNavigate={onNavigate} onOpenModal={onOpenModal} onRename={onRename} />;
    };
    
    return (
        <div>
            <Breadcrumbs path={breadcrumbPath} onNavigate={onNavigate} />
            {renderContent()}
        </div>
    );
};

const EventLog = ({ events }) => {
  const typeClasses = { info: 'text-cyan-400', warning: 'text-yellow-400', success: 'text-green-400', danger: 'text-red-400' };
  return (
    <footer className="flex-shrink-0 h-24 bg-stone-900/70 backdrop-blur-sm border-t border-stone-700 p-3 overflow-y-auto">
      <div className="font-mono text-xs space-y-1">
        {events.map((event, i) => (
          <p key={i}><span className="text-stone-500 mr-2">{event.time}</span> <span className={typeClasses[event.type] || 'text-stone-300'}>{event.message}</span></p>
        ))}
      </div>
    </footer>
  );
};

// --- MODAL CONTENT COMPONENTS ---
const AddRoomModal = ({ onSubmit, structure, onClose }) => {
    const [area, setArea] = useState(100);
    const availableArea = structure.totalArea - structure.usedArea;
    const isAreaValid = area > 0 && area <= availableArea;

    const handleSubmit = (e) => {
        e.preventDefault();
        const formData = new FormData(e.target as HTMLFormElement);
        onSubmit({
            structureId: structure.id,
            name: formData.get('name') as string,
            purpose: formData.get('purpose') as string,
            area: parseInt(formData.get('area') as string, 10),
        });
    };
    return (
        <form onSubmit={handleSubmit} className="space-y-4">
            <FormInput name="name" label="Room Name" placeholder="e.g., Grow Room C" required />
            <FormSelect name="purpose" label="Room Purpose" defaultValue="growroom">
                <option value="growroom">Grow Room</option>
                <option value="processing">Processing</option>
                <option value="drying">Drying</option>
                <option value="storage">Storage</option>
                <option value="breakroom">Break Room</option>
            </FormSelect>
            <FormInput name="area" label={`Area (m²)`} type="number" value={area} onChange={e => setArea(parseInt(e.target.value, 10) || 0)} min="1" max={availableArea} required />
            <p className={`text-sm ${isAreaValid ? 'text-stone-400' : 'text-red-400'}`}>
                Available: {availableArea} m²
            </p>
            <PrimaryButton type="submit" disabled={!isAreaValid}>Create Room</PrimaryButton>
        </form>
    );
};
const AddZoneModal = ({ onSubmit, roomId, onClose }) => {
    const handleSubmit = (e) => {
        e.preventDefault();
        const formData = new FormData(e.target as HTMLFormElement);
        onSubmit({
            roomId,
            name: formData.get('name') as string,
            method: formData.get('method') as string,
        });
    };
    return (
        <form onSubmit={handleSubmit} className="space-y-4">
            <FormInput name="name" label="Zone Name" placeholder="e.g., Zone C1" required />
            <FormSelect name="method" label="Cultivation Method" defaultValue="Sea of Green">
                <option>Sea of Green</option>
                <option>SCROG</option>
                <option>Empty</option>
            </FormSelect>
            <PrimaryButton type="submit">Create Zone</PrimaryButton>
        </form>
    );
};
const PlantStrainModal = ({ onSubmit, zoneId, onClose }) => {
    const handleSubmit = (e) => {
        e.preventDefault();
        const formData = new FormData(e.target as HTMLFormElement);
        onSubmit({
            zoneId,
            strain: formData.get('strain') as string,
            count: parseInt(formData.get('count') as string, 10),
        });
    };
     return (
        <form onSubmit={handleSubmit} className="space-y-4">
            <FormSelect name="strain" label="Strain" defaultValue="OG Kush">
                <option>OG Kush</option>
                <option>White Widow</option>
                <option>Blue Dream</option>
            </FormSelect>
            <FormInput name="count" label="Number of Plants" type="number" defaultValue="16" min="1" max="50" required />
            <PrimaryButton type="submit">Plant</PrimaryButton>
        </form>
    );
};
const PlantDetailModal = ({ plant, onHarvest, onTrash }) => {
    return (
        <div className="text-stone-300 space-y-4">
            <div className="grid grid-cols-2 gap-4 text-sm">
                <div><span className="font-semibold text-stone-400">Strain:</span> {plant.name}</div>
                <div><span className="font-semibold text-stone-400">Health:</span> <span className={plant.health > 80 ? 'text-green-400' : 'text-yellow-400'}>{plant.health}%</span></div>
                <div><span className="font-semibold text-stone-400">Progress:</span> {plant.progress}%</div>
                <div><span className="font-semibold text-stone-400">Stress:</span> {plant.stress}%</div>
                <div><span className="font-semibold text-stone-400">Status:</span> <span className="font-semibold capitalize">{plant.status}</span></div>
                <div><span className="font-semibold text-stone-400">Harvestable:</span> {plant.harvestable ? <span className="text-green-400">Yes</span> : 'No'}</div>
            </div>
            <div className="flex space-x-2 pt-4 border-t border-stone-700">
                <button onClick={onHarvest} disabled={!plant.harvestable} className="flex-1 flex items-center justify-center space-x-2 bg-green-600 hover:bg-green-700 text-white font-semibold py-2 px-4 rounded-md transition-colors disabled:bg-stone-600 disabled:cursor-not-allowed">
                    <HarvestIcon /> <span>Harvest</span>
                </button>
                 <button onClick={onTrash} className="flex-1 flex items-center justify-center space-x-2 bg-red-600 hover:bg-red-700 text-white font-semibold py-2 px-4 rounded-md transition-colors">
                    <TrashIcon /> <span>Trash</span>
                </button>
            </div>
        </div>
    );
};
const AddDeviceModal = ({ onSubmit, zoneId, onClose }) => {
     const handleSubmit = (e) => {
        e.preventDefault();
        const formData = new FormData(e.target as HTMLFormElement);
        const [name, type] = (formData.get('device') as string).split('|');
        const count = parseInt(formData.get('count') as string, 10) || 1;
        onSubmit({ zoneId, name, type, count });
    };
    return (
        <form onSubmit={handleSubmit} className="space-y-4">
            <FormSelect name="device" label="Device Model" defaultValue="Sunstream Pro LED|Lighting">
                <option value="Sunstream Pro LED|Lighting">Sunstream Pro LED (Lighting)</option>
                <option value="ClimateKing 5000|HVAC">ClimateKing 5000 (HVAC)</option>
                <option value="CO₂ Injector v2|Climate">CO₂ Injector v2 (Climate)</option>
                <option value="HydroFlow Irrigator|Irrigation">HydroFlow Irrigator (Irrigation)</option>
            </FormSelect>
            <FormInput name="count" label="Quantity" type="number" defaultValue="1" min="1" max="10" required />
            <PrimaryButton type="submit">Install Device</PrimaryButton>
        </form>
    );
};
const RemoveDeviceModal = ({ onSubmit, zoneId, device, onClose }) => {
    const [quantity, setQuantity] = useState(1);
    const handleSubmit = (e) => {
        e.preventDefault();
        onSubmit({ zoneId, device, quantity: Number(quantity) });
    };
    return (
        <form onSubmit={handleSubmit} className="space-y-4">
            <p>Removing: <span className="font-semibold text-stone-100">{device.name}</span></p>
            <FormInput name="quantity" label={`Quantity (Max: ${device.count})`} type="number" value={quantity} onChange={e => setQuantity(Number(e.target.value))} min="1" max={device.count} required />
            <div className="flex space-x-2">
                <PrimaryButton type="submit">Remove</PrimaryButton>
                <button type="button" onClick={() => onSubmit({ zoneId, device, quantity: device.count })} className="w-full bg-red-600/80 hover:bg-red-700 text-white font-semibold py-2 px-4 rounded-md transition-colors">Remove All ({device.count})</button>
            </div>
        </form>
    );
};
const RentStructureModal = ({ onSubmit, availableStructures, balance, onClose }) => {
    const handleSubmit = (e) => {
        e.preventDefault();
        const formData = new FormData(e.target as HTMLFormElement);
        const structureId = formData.get('structure') as string;
        const selected = availableStructures.find(s => s.id === structureId);
        if (selected) {
            onSubmit({ structure: selected, name: formData.get('name') as string });
        }
    };
    return (
        <form onSubmit={handleSubmit} className="space-y-4">
            <FormInput name="name" label="Structure Name" placeholder="e.g., Main Facility" required />
            <FormSelect name="structure" label="Available Structures">
                {availableStructures.map(s => (
                    <option key={s.id} value={s.id} disabled={s.cost > balance}>
                        {s.name} - {s.totalArea} m² ({s.cost.toLocaleString()} €)
                    </option>
                ))}
            </FormSelect>
            <PrimaryButton type="submit">Rent Structure</PrimaryButton>
        </form>
    );
};
const HireEmployeeModal = ({ onSubmit, candidate, structures, onClose }) => {
    const handleSubmit = (e) => {
        e.preventDefault();
        const formData = new FormData(e.target as HTMLFormElement);
        const structureId = formData.get('assignment') as string;
        onSubmit({ candidate, structureId });
    };
    return (
        <form onSubmit={handleSubmit} className="space-y-4">
            <p>Hiring <span className="font-semibold text-stone-100">{candidate.name}</span> as a <span className="font-semibold text-lime-400">{candidate.desiredRole}</span>.</p>
            <FormSelect name="assignment" label="Assign to Structure" defaultValue={structures[0]?.id || ''}>
                {structures.map(s => <option key={s.id} value={s.id}>{s.name}</option>)}
            </FormSelect>
            <PrimaryButton type="submit">Confirm Hire</PrimaryButton>
        </form>
    );
};

const DeleteConfirmationModal = ({ entityType, entityName, onConfirm }) => (
    <div className="space-y-4">
        <p className="text-stone-300">Are you sure you want to delete the {entityType} <span className="font-semibold text-stone-100">{entityName}</span>?</p>
        <p className="text-sm text-yellow-400">This action cannot be undone.</p>
        <DangerButton onClick={onConfirm}>Confirm Deletion</DangerButton>
    </div>
);

const DuplicateRoomModal = ({ onSubmit, room, structure }) => {
    const [name, setName] = useState(`${room.name} (Copy)`);
    const availableArea = structure.totalArea - structure.usedArea;
    const canDuplicate = room.area <= availableArea;
    const deviceCost = room.zones.reduce((total, zone) => {
        return total + zone.devices.reduce((zoneTotal, device) => {
            return zoneTotal + (DEVICE_COSTS[device.name] || 0);
        }, 0);
    }, 0);

    const handleSubmit = (e) => {
        e.preventDefault();
        onSubmit({ room, newName: name, deviceCost });
    };

    return (
        <form onSubmit={handleSubmit} className="space-y-4">
            <FormInput label="New Room Name" value={name} onChange={e => setName(e.target.value)} required />
            <div className="text-sm space-y-1 text-stone-300">
                <p>Required Area: <span className="font-semibold">{room.area} m²</span></p>
                <p className={canDuplicate ? 'text-green-400' : 'text-red-400'}>Available Area: <span className="font-semibold">{availableArea} m²</span></p>
                <p>Device Duplication Cost (CapEx): <span className="font-semibold text-yellow-400">{deviceCost.toLocaleString()} €</span></p>
            </div>
            <PrimaryButton type="submit" disabled={!canDuplicate}>Duplicate Room</PrimaryButton>
        </form>
    );
};

const DuplicateZoneModal = ({ onSubmit, zone, room }) => {
    const [name, setName] = useState(`${zone.name} (Copy)`);
    const [includeDevices, setIncludeDevices] = useState(true);
    const [includeMethod, setIncludeMethod] = useState(true);

    const deviceCost = zone.devices.reduce((total, device) => total + (DEVICE_COSTS[device.name] || 0), 0);
    
    const handleSubmit = (e) => {
        e.preventDefault();
        onSubmit({ zone, room, newName: name, includeDevices, includeMethod });
    };

    return (
        <form onSubmit={handleSubmit} className="space-y-4">
            <FormInput label="New Zone Name" value={name} onChange={e => setName(e.target.value)} required />
            <div className="space-y-2">
                <FormCheckbox label="Duplicate Cultivation Method" checked={includeMethod} onChange={e => setIncludeMethod(e.target.checked)} />
                <FormCheckbox label={`Duplicate Devices (${(deviceCost).toLocaleString()} €)`} checked={includeDevices} onChange={e => setIncludeDevices(e.target.checked)} />
            </div>
             <PrimaryButton type="submit">Duplicate Zone</PrimaryButton>
        </form>
    );
};

const GameMenuModal = () => (
    <div className="space-y-2">
        <button className="w-full text-left p-2 hover:bg-stone-700 rounded-md">Save Game</button>
        <button className="w-full text-left p-2 hover:bg-stone-700 rounded-md">Load Game</button>
        <button className="w-full text-left p-2 hover:bg-stone-700 rounded-md">Export Snapshot</button>
        <button className="w-full text-left p-2 hover:bg-stone-700 rounded-md">Import Snapshot</button>
        <hr className="border-stone-600"/>
        <button className="w-full text-left p-2 text-red-400 hover:bg-red-500/20 rounded-md">Reset Game</button>
    </div>
);


const App = () => {
    const [gameData, setGameData] = useState(initialMockData);
    const [selection, setSelection] = useState<{ view: string; structureId: string | null; roomId: string | null; zoneId: string | null; }>({ view: 'dashboard', structureId: null, roomId: null, zoneId: null });
    const [modal, setModal] = useState<{ type: string | null; props: any }>({ type: null, props: {} });
    const [isPlaying, setIsPlaying] = useState(true);
    const [gameSpeed, setGameSpeed] = useState('1x');

    const openModal = (type, props = {}) => setModal({ type, props });
    const closeModal = () => setModal({ type: null, props: {} });
    
    const handleTogglePlay = () => setIsPlaying(prev => !prev);
    const handleChangeSpeed = (newSpeed) => setGameSpeed(newSpeed);

    const handleNavigate = (level, id = null, parentId = null, grandParentId = null) => {
      if (level === 'dashboard') {
        setSelection({ view: 'dashboard', structureId: null, roomId: null, zoneId: null });
      } else if (level === 'structure') {
        setSelection({ view: 'dashboard', structureId: id, roomId: null, zoneId: null });
      } else if (level === 'room') {
        setSelection({ view: 'dashboard', structureId: parentId, roomId: id, zoneId: null });
      } else if (level === 'zone') {
        setSelection({ view: 'dashboard', structureId: grandParentId, roomId: parentId, zoneId: id });
      } else if (level === 'personnel') {
        setSelection({ view: 'personnel', structureId: null, roomId: null, zoneId: null });
      } else if (level === 'finance') {
        setSelection({ view: 'finance', structureId: null, roomId: null, zoneId: null });
      }
    }

    // --- HELPER FUNCTIONS ---
    const findStructureForRoom = (roomId, data = gameData) => data.structures.find(s => s.rooms.some(r => r.id === roomId));
    const findRoomById = (roomId, data = gameData) => {
        for (const structure of data.structures) {
            const room = structure.rooms.find(r => r.id === roomId);
            if (room) return room;
        }
        return null;
    };
    const findZoneById = (zoneId, data = gameData) => {
        for (const structure of data.structures) {
            for (const room of structure.rooms) {
                const zone = room.zones.find(z => z.id === zoneId);
                if (zone) return zone;
            }
        }
        return null;
    };
    const findParentRoomForZone = (zoneId, data = gameData) => {
         for (const structure of data.structures) {
            for (const room of structure.rooms) {
                if(room.zones.some(z => z.id === zoneId)) return room;
            }
        }
        return null;
    }

    const handleControlsChange = (zoneId, controlName, newValue) => {
      setGameData(prevData => {
          const newData = JSON.parse(JSON.stringify(prevData));
          const zone = findZoneById(zoneId, newData);
          if (zone && zone.controls && zone.kpis) {
              if (controlName === 'lightPower') zone.controls.light.power = newValue;
              else if (controlName === 'lightState') zone.controls.light.on = newValue;
              else if (controlName === 'lightCycle') zone.controls.light.cycle = newValue;
              else zone.controls[controlName].value = newValue;
              
              const lightOn = zone.controls.light.on;
              const power = zone.controls.light.power;
              const ppfdKpi = zone.kpis.find(k => k.title === 'PPFD');
              const ppfdTarget = ppfdKpi?.target || 900;

              if (ppfdKpi) {
                const newPPFD = lightOn ? (ppfdTarget * (power / 100)) : 0;
                ppfdKpi.value = newPPFD.toFixed(0);
                if (newPPFD > ppfdTarget * 0.8) ppfdKpi.status = 'optimal';
                else if (newPPFD > 0) ppfdKpi.status = 'warning';
                else ppfdKpi.status = 'danger';
              }
              
              return newData; 
          }
          return prevData;
      });
    };

    const handleCreateRoom = ({ structureId, name, purpose, area }) => {
        setGameData(prevData => {
            const newData = JSON.parse(JSON.stringify(prevData));
            const structure = newData.structures.find(s => s.id === structureId);
            if (structure && (structure.totalArea - structure.usedArea) >= area) {
                const newRoom: any = { id: uuid(), name, purpose, area, zones: [] };
                if (purpose === 'breakroom') newRoom.occupancy = { current: 0 };
                if (purpose === 'processing') newRoom.curingBatches = [];
                structure.rooms.push(newRoom);
                structure.usedArea += area;
            }
            return newData;
        });
        closeModal();
    };
    
    const handleCreateZone = ({ roomId, name, method }) => {
        setGameData(prevData => {
            const newData = JSON.parse(JSON.stringify(prevData));
            const room = findRoomById(roomId, newData);
            if (room && room.purpose === 'growroom') {
                const newZone = { id: uuid(), name, method, area: 50, maxPlants: 20, strain: '-', phase: 'Empty', devices: [], plants: [], estYield: 0, stress: 0, kpis: [], controls: { temperature: { value: 22, min: 15, max: 35, target: 24 }, humidity: { value: 50, min: 30, max: 80, target: 50 }, co2: { value: 400, min: 400, max: 2000, target: 1200 }, light: { power: 0, on: false, cycle: '18h/6h' } } };
                room.zones.push(newZone);
                handleNavigate('zone', newZone.id, room.id, findStructureForRoom(room.id, newData).id);
            }
            return newData;
        });
        closeModal();
    };

    const handlePlantStrain = ({ zoneId, strain, count }) => {
         setGameData(prevData => {
            const newData = JSON.parse(JSON.stringify(prevData));
            const zone = findZoneById(zoneId, newData);
            if(zone){
                zone.strain = strain;
                zone.phase = "Vegetative (Day 1)";
                zone.plants = Array(count).fill(0).map(()=> createPlant({ name: strain, health: 100, progress: 1 }));
            }
            return newData;
        });
        closeModal();
    }

    const handleAddDevice = ({ zoneId, name, type, count }) => {
         setGameData(prevData => {
            const newData = JSON.parse(JSON.stringify(prevData));
            const zone = findZoneById(zoneId, newData);
            if(zone){
                for (let i = 0; i < count; i++) {
                   zone.devices.push({ id: uuid(), name, type });
                }
            }
            return newData;
        });
        closeModal();
    }
    
    const handleRemoveDevice = ({ zoneId, device, quantity }) => {
        setGameData(prevData => {
            const newData = JSON.parse(JSON.stringify(prevData));
            const zone = findZoneById(zoneId, newData);
            if (zone) {
                const deviceIdsToRemove = new Set(device.ids.slice(0, quantity));
                zone.devices = zone.devices.filter(d => !deviceIdsToRemove.has(d.id));
            }
            return newData;
        });
        closeModal();
    };

    const handleRentStructure = ({ structure, name }) => {
        setGameData(prevData => {
            const newData = JSON.parse(JSON.stringify(prevData));
            if (newData.globalStats.balance >= structure.cost) {
                newData.globalStats.balance -= structure.cost;
                const newStructure = {
                    id: uuid(),
                    name: name,
                    footprint: structure.footprint,
                    totalArea: structure.totalArea,
                    usedArea: 0,
                    dailyCost: Math.round(structure.cost / 2000), // Example daily cost
                    rooms: []
                };
                newData.structures.push(newStructure);
                handleNavigate('structure', newStructure.id);
            }
            return newData;
        });
        closeModal();
    };

    const handleRename = ({ entityType, entityId, newName }) => {
        setGameData(prevData => {
            const newData = JSON.parse(JSON.stringify(prevData));
            let entity;
            if (entityType === 'structure') {
                entity = newData.structures.find(s => s.id === entityId);
            } else if (entityType === 'room') {
                entity = findRoomById(entityId, newData);
            } else if (entityType === 'zone') {
                entity = findZoneById(entityId, newData);
            }
            if (entity) {
                entity.name = newName;
            }
            return newData;
        });
    };

    const handleDelete = ({ entityType, entityId }) => {
        setGameData(prevData => {
            const newData = JSON.parse(JSON.stringify(prevData));
            if (entityType === 'room') {
                const structure = findStructureForRoom(entityId, newData);
                if (structure) {
                    const room = structure.rooms.find(r => r.id === entityId);
                    structure.usedArea -= room.area;
                    structure.rooms = structure.rooms.filter(r => r.id !== entityId);
                    handleNavigate('structure', structure.id);
                }
            } else if (entityType === 'zone') {
                const room = findParentRoomForZone(entityId, newData);
                if (room) {
                    room.zones = room.zones.filter(z => z.id !== entityId);
                    const structure = findStructureForRoom(room.id, newData);
                    handleNavigate('room', room.id, structure.id);
                }
            }
            return newData;
        });
        closeModal();
    };

    const handleDuplicateRoom = ({ room, newName, deviceCost }) => {
        setGameData(prevData => {
            const newData = JSON.parse(JSON.stringify(prevData));
            const structure = findStructureForRoom(room.id, newData);
            if (structure && (structure.totalArea - structure.usedArea) >= room.area) {
                const newRoom = JSON.parse(JSON.stringify(room)); // Deep copy
                newRoom.id = uuid();
                newRoom.name = newName;
                newRoom.zones = newRoom.zones.map(zone => {
                    zone.id = uuid();
                    zone.devices = zone.devices.map(device => ({ ...device, id: uuid() }));
                    return zone;
                });

                structure.rooms.push(newRoom);
                structure.usedArea += newRoom.area;
                newData.globalStats.balance -= deviceCost;
            }
            return newData;
        });
        closeModal();
    };

    const handleDuplicateZone = ({ zone, room, newName, includeDevices, includeMethod }) => {
         setGameData(prevData => {
            const newData = JSON.parse(JSON.stringify(prevData));
            const targetRoom = findRoomById(room.id, newData);
            if (targetRoom) {
                const newZone = JSON.parse(JSON.stringify(zone));
                newZone.id = uuid();
                newZone.name = newName;
                
                if (!includeMethod) {
                    newZone.method = 'Empty';
                    newZone.plants = [];
                    newZone.strain = '-';
                    newZone.phase = 'Empty';
                } else {
                    newZone.plants = newZone.plants.map(p => ({ ...p, id: uuid() }));
                }

                if (!includeDevices) {
                    newZone.devices = [];
                } else {
                    newZone.devices = newZone.devices.map(d => ({ ...d, id: uuid() }));
                    const deviceCost = newZone.devices.reduce((total, device) => total + (DEVICE_COSTS[device.name] || 0), 0);
                    newData.globalStats.balance -= deviceCost;
                }
                
                targetRoom.zones.push(newZone);
            }
            return newData;
        });
        closeModal();
    };
    
    const handleRefreshCandidates = () => {
        setGameData(prev => ({...prev, candidates: generateCandidates() }));
    };

    const handleHireEmployee = ({ candidate, structureId }) => {
        setGameData(prev => {
            const newEmployee = { ...candidate, assignment: structureId };
            return {
                ...prev,
                employees: [...prev.employees, newEmployee],
                candidates: prev.candidates.filter(c => c.id !== candidate.id),
            };
        });
        closeModal();
    };
    
    const handleFireEmployee = (employeeId) => {
        setGameData(prev => ({
            ...prev,
            employees: prev.employees.filter(e => e.id !== employeeId),
        }));
    };

    const handlePlantAction = (zoneId, plantId, action) => {
        setGameData(prevData => {
            const newData = JSON.parse(JSON.stringify(prevData));
            const zone = findZoneById(zoneId, newData);
            if (zone) {
                if (action === 'harvest' || action === 'trash') {
                    zone.plants = zone.plants.filter(p => p.id !== plantId);
                }
            }
            return newData;
        });
        closeModal();
    };

    const handleBatchAction = (zoneId, plantIds, action) => {
        setGameData(prevData => {
            const newData = JSON.parse(JSON.stringify(prevData));
            const zone = findZoneById(zoneId, newData);
            if (zone) {
                const idSet = new Set(plantIds);
                if (action === 'harvest' || action === 'trash') {
                    zone.plants = zone.plants.filter(p => !idSet.has(p.id));
                }
                // Placeholder for 'treat' action
                if (action === 'treat') {
                     zone.plants.forEach(p => {
                        if (idSet.has(p.id)) {
                           p.status = 'treatment';
                        }
                    });
                }
            }
            return newData;
        });
    };

    const modalTitles = {
        addRoom: "Create New Room",
        addZone: "Create New Zone",
        plantStrain: "Plant New Strain",
        addDevice: "Install New Device",
        removeDevice: "Remove Device",
        rentStructure: "Rent New Structure",
        hireEmployee: "Hire Candidate",
        gameMenu: "Game Menu",
        plantDetail: "Plant Details",
        delete: "Confirm Deletion",
        duplicateRoom: "Duplicate Room",
        duplicateZone: "Duplicate Zone",
    };

    const modalContent = () => {
        switch (modal.type) {
            case 'addRoom':
                return <AddRoomModal onSubmit={handleCreateRoom} structure={gameData.structures.find(s => s.id === modal.props.structureId)} onClose={closeModal} />;
            case 'addZone':
                return <AddZoneModal onSubmit={handleCreateZone} roomId={modal.props.roomId} onClose={closeModal} />;
            case 'plantStrain':
                return <PlantStrainModal onSubmit={handlePlantStrain} zoneId={modal.props.zoneId} onClose={closeModal} />;
            case 'plantDetail':
                return <PlantDetailModal 
                            plant={modal.props.plant} 
                            onHarvest={() => handlePlantAction(modal.props.zoneId, modal.props.plant.id, 'harvest')}
                            onTrash={() => handlePlantAction(modal.props.zoneId, modal.props.plant.id, 'trash')}
                        />;
            case 'addDevice':
                return <AddDeviceModal onSubmit={handleAddDevice} zoneId={modal.props.zoneId} onClose={closeModal} />;
            case 'removeDevice':
                return <RemoveDeviceModal onSubmit={handleRemoveDevice} zoneId={modal.props.zoneId} device={modal.props.device} onClose={closeModal} />;
            case 'rentStructure':
                return <RentStructureModal onSubmit={handleRentStructure} availableStructures={gameData.availableStructures} balance={gameData.globalStats.balance} onClose={closeModal} />;
            case 'hireEmployee':
                return <HireEmployeeModal onSubmit={handleHireEmployee} candidate={modal.props.candidate} structures={gameData.structures} onClose={closeModal} />;
            case 'delete':
                return <DeleteConfirmationModal entityType={modal.props.entityType} entityName={modal.props.entityName} onConfirm={() => handleDelete(modal.props)} />;
            case 'duplicateRoom': {
                const room = findRoomById(modal.props.room.id);
                const structure = findStructureForRoom(room.id);
                return <DuplicateRoomModal onSubmit={handleDuplicateRoom} room={room} structure={structure} />;
            }
            case 'duplicateZone': {
                const zone = findZoneById(modal.props.zone.id);
                const room = findParentRoomForZone(zone.id);
                return <DuplicateZoneModal onSubmit={handleDuplicateZone} zone={zone} room={room} />;
            }
            case 'gameMenu':
                return <GameMenuModal />;
            default:
                return null;
        }
    };

    return (
        <div className="h-full flex flex-col bg-stone-900 text-stone-300">
            <Dashboard 
                stats={gameData.globalStats} 
                onOpenModal={openModal} 
                isPlaying={isPlaying} 
                gameSpeed={gameSpeed}
                onTogglePlay={handleTogglePlay}
                onChangeSpeed={handleChangeSpeed}
                onNavigate={handleNavigate}
            />
            <div className="flex-1 flex overflow-hidden">
                <Sidebar structures={gameData.structures} selection={selection} onNavigate={handleNavigate} onOpenModal={openModal} />
                <main className="flex-1 p-6 overflow-y-auto">
                    <MainContent 
                        selection={selection} 
                        gameData={gameData} 
                        onControlsChange={handleControlsChange}
                        onOpenModal={openModal}
                        onNavigate={handleNavigate}
                        onRename={handleRename}
                        onRefreshCandidates={handleRefreshCandidates}
                        onFireEmployee={handleFireEmployee}
                        onBatchAction={handleBatchAction}
                    />
                </main>
            </div>
            <EventLog events={gameData.events} />
            {modal.type && <Modal title={modalTitles[modal.type]} onClose={closeModal}>{modalContent()}</Modal>}
        </div>
    );
};

const root = createRoot(document.getElementById('root'));
root.render(<App />);