[
  {
    "id": "F-0001",
    "topic": "Breeding",
    "formula": "T_gen = veg + flower + tail + post",
    "sourcePath": "docs/addendum/ideas/breeding_module.md",
    "heading": "1) Real → Game Mapping (Time)",
    "anchor": "1-real-→-game-mapping-time",
    "startLine": 22,
    "endLine": 22,
    "context": "T_gen = veg + flower + tail + post",
    "glossary": []
  },
  {
    "id": "F-0002",
    "topic": "Breeding",
    "formula": "veg   = avg(vegetationDays[A], vegetationDays[B])",
    "sourcePath": "docs/addendum/ideas/breeding_module.md",
    "heading": "1) Real → Game Mapping (Time)",
    "anchor": "1-real-→-game-mapping-time",
    "startLine": 23,
    "endLine": 23,
    "context": "veg   = avg(vegetationDays[A], vegetationDays[B])",
    "glossary": []
  },
  {
    "id": "F-0003",
    "topic": "Breeding",
    "formula": "flower= avg(floweringDays[A],  floweringDays[B])",
    "sourcePath": "docs/addendum/ideas/breeding_module.md",
    "heading": "1) Real → Game Mapping (Time)",
    "anchor": "1-real-→-game-mapping-time",
    "startLine": 24,
    "endLine": 24,
    "context": "flower= avg(floweringDays[A],  floweringDays[B])",
    "glossary": []
  },
  {
    "id": "F-0004",
    "topic": "Breeding",
    "formula": "tail  = max(0, seedMaturationDays - (flower - pollinationDayInFlower))",
    "sourcePath": "docs/addendum/ideas/breeding_module.md",
    "heading": "1) Real → Game Mapping (Time)",
    "anchor": "1-real-→-game-mapping-time",
    "startLine": 25,
    "endLine": 25,
    "context": "tail  = max(0, seedMaturationDays - (flower - pollinationDayInFlower))",
    "glossary": []
  },
  {
    "id": "F-0005",
    "topic": "Breeding",
    "formula": "post  = postProcessingDays",
    "sourcePath": "docs/addendum/ideas/breeding_module.md",
    "heading": "1) Real → Game Mapping (Time)",
    "anchor": "1-real-→-game-mapping-time",
    "startLine": 26,
    "endLine": 26,
    "context": "post  = postProcessingDays",
    "glossary": []
  },
  {
    "id": "F-0006",
    "topic": "Breeding",
    "formula": "effectiveDays ≈ ceil(T_gen / parallelBatches)",
    "sourcePath": "docs/addendum/ideas/breeding_module.md",
    "heading": "1) Real → Game Mapping (Time)",
    "anchor": "1-real-→-game-mapping-time",
    "startLine": 31,
    "endLine": 31,
    "context": "Parallelization reduces **calendar time** after the first generation: `effectiveDays ≈ ceil(T_gen / parallelBatches)`.",
    "glossary": []
  },
  {
    "id": "F-0007",
    "topic": "Terpenes",
    "formula": "w_t = mg_g_t / total_mg_g",
    "sourcePath": "docs/addendum/ideas/terpenes.md",
    "heading": "3) Axis Derivation from Terpene Profile (Heuristic, Concept)",
    "anchor": "3-axis-derivation-from-terpene-profile-heuristic-concept",
    "startLine": 57,
    "endLine": 57,
    "context": "- **Input:** terpene shares `w_t = mg_g_t / total_mg_g`.",
    "glossary": []
  },
  {
    "id": "F-0008",
    "topic": "Terpenes",
    "formula": "axis = Σ (share_terpene × weight_terpene→axis) → clamp \\[0..1]",
    "sourcePath": "docs/addendum/ideas/terpenes.md",
    "heading": "3) Axis Derivation from Terpene Profile (Heuristic, Concept)",
    "anchor": "3-axis-derivation-from-terpene-profile-heuristic-concept",
    "startLine": 59,
    "endLine": 59,
    "context": "- **Computation:** axis = Σ (share_terpene × weight_terpene→axis) → clamp \\[0..1]; optional gamma/rescaling.",
    "glossary": []
  },
  {
    "id": "F-0009",
    "topic": "Genetics",
    "formula": "sum ≤ 1",
    "sourcePath": "docs/DD.md",
    "heading": "Schema (fields & meaning)",
    "anchor": "schema-fields-meaning",
    "startLine": 30,
    "endLine": 30,
    "context": "- `genotype?: { sativa?: number, indica?: number, ruderalis?: number }` — Fractions `0–1`; sum ≤ 1 (remainder = unspecified).",
    "glossary": []
  },
  {
    "id": "F-0010",
    "topic": "Resilience",
    "formula": "1.0 = neutral",
    "sourcePath": "docs/DD.md",
    "heading": "Schema (fields & meaning)",
    "anchor": "schema-fields-meaning",
    "startLine": 36,
    "endLine": 36,
    "context": "- `tolerances?: object` — Optional numeric tolerance multipliers by category (e.g., `temp`, `humidity`, `co2`, `underwatering`, `overnutrient`), `1.0` = neutral.",
    "glossary": []
  },
  {
    "id": "F-0011",
    "topic": "Breeding",
    "formula": "±noise × base",
    "sourcePath": "docs/DD.md",
    "heading": "Schema (fields & meaning)",
    "anchor": "schema-fields-meaning",
    "startLine": 69,
    "endLine": 69,
    "context": "- `noise?: number (0–1)` — **Breeding variability**; max fractional deviation for sampled offspring traits (e.g., `±noise × base`).",
    "glossary": []
  },
  {
    "id": "F-0012",
    "topic": "Capacity",
    "formula": "Max plant count = floor(zoneArea / areaPerPlant)",
    "sourcePath": "docs/DD.md",
    "heading": "Schema",
    "anchor": "schema",
    "startLine": 168,
    "endLine": 168,
    "context": "- `areaPerPlant: number (m²)` — Max plant count = `floor(zoneArea / areaPerPlant)`.",
    "glossary": []
  },
  {
    "id": "F-0013",
    "topic": "Time Scaling",
    "formula": "tickLengthMinutes / 60",
    "sourcePath": "docs/DD.md",
    "heading": "7) Prices — `/data/prices/*.json`",
    "anchor": "7-prices-—-datapricesjson",
    "startLine": 260,
    "endLine": 260,
    "context": "- `capitalCost?: number` — Alias for legacy `capitalExpenditure`.- `baseMaintenanceCostPerTick?: number` — Hourly maintenance base rate (multiply by `tickLengthMinutes / 60`).- `costIncreasePer1000Ticks?: number` — Aging curve scalar. `}}`",
    "glossary": []
  },
  {
    "id": "F-0014",
    "topic": "Tasks",
    "formula": "progressTicks >= durationTicks",
    "sourcePath": "docs/system/employees.md",
    "heading": "2) Work as Discrete Tasks",
    "anchor": "2-work-as-discrete-tasks",
    "startLine": 63,
    "endLine": 63,
    "context": "When an employee claims a task, their status becomes **Working**. Each tick spent on the task increases `progressTicks` by 1. When `progressTicks >= durationTicks`, the task completes and its **effects** are applied to the game state (device repaired, harvest added to inventory, cleanliness improved, etc.).",
    "glossary": []
  },
  {
    "id": "F-0015",
    "topic": "Economics",
    "formula": "revenue = harvestBasePricePerGram × modifiers",
    "sourcePath": "docs/system/facade.md",
    "heading": "4.8 Finance & Market",
    "anchor": "48-finance-market",
    "startLine": 121,
    "endLine": 121,
    "context": "- `sellInventory(lotId, quantity_g)` — revenue = `harvestBasePricePerGram × modifiers`.",
    "glossary": []
  },
  {
    "id": "F-0016",
    "topic": "Scheduler",
    "formula": "Math.floor(tick / 168)",
    "sourcePath": "docs/system/job_market_population.md",
    "heading": "Weekly Refresh Lifecycle",
    "anchor": "weekly-refresh-lifecycle",
    "startLine": 16,
    "endLine": 16,
    "context": "`Math.floor(tick / 168)` (168 ticks ≈ 1 simulated week when 1 tick = 1 hour).",
    "glossary": []
  },
  {
    "id": "F-0017",
    "topic": "Seeding",
    "formula": "apiSeed = override ?? \"<gameSeed>-<weekIndex>\"",
    "sourcePath": "docs/system/job_market_population.md",
    "heading": "Deterministic Seeding Strategy",
    "anchor": "deterministic-seeding-strategy",
    "startLine": 87,
    "endLine": 87,
    "context": "1. **Weekly API seed.** `apiSeed = override ?? \"<gameSeed>-<weekIndex>\"` keeps",
    "glossary": []
  },
  {
    "id": "F-0018",
    "topic": "Probability",
    "formula": "P(other) = pDiverse",
    "sourcePath": "docs/system/job_market_population.md",
    "heading": "Candidate Synthesis Pipeline",
    "anchor": "candidate-synthesis-pipeline",
    "startLine": 112,
    "endLine": 112,
    "context": "4. **Gender draw.** Seeded RNG selects gender with `P(other) = pDiverse` and",
    "glossary": []
  },
  {
    "id": "F-0019",
    "topic": "Probability",
    "formula": "P(male) = P(female) = (1 - pDiverse) / 2",
    "sourcePath": "docs/system/job_market_population.md",
    "heading": "Candidate Synthesis Pipeline",
    "anchor": "candidate-synthesis-pipeline",
    "startLine": 113,
    "endLine": 113,
    "context": "`P(male) = P(female) = (1 - pDiverse) / 2`, unless the profile forces a",
    "glossary": []
  },
  {
    "id": "F-0020",
    "topic": "Scheduler",
    "formula": "accumulatedMs += now - lastNow",
    "sourcePath": "docs/system/simulation-engine.md",
    "heading": "Process",
    "anchor": "process",
    "startLine": 14,
    "endLine": 14,
    "context": "1. **Wall-time accumulation**: keep `accumulatedMs += now - lastNow`.",
    "glossary": []
  },
  {
    "id": "F-0021",
    "topic": "Scheduler",
    "formula": "accumulatedMs ≥ tickIntervalMs / gameSpeed",
    "sourcePath": "docs/system/simulation-engine.md",
    "heading": "Process",
    "anchor": "process",
    "startLine": 15,
    "endLine": 15,
    "context": "2. **Tick threshold**: while `accumulatedMs ≥ tickIntervalMs / gameSpeed`, do:",
    "glossary": []
  },
  {
    "id": "F-0022",
    "topic": "Scheduler",
    "formula": "accumulatedMs -= tickIntervalMs / gameSpeed",
    "sourcePath": "docs/system/simulation-engine.md",
    "heading": "Process",
    "anchor": "process",
    "startLine": 17,
    "endLine": 17,
    "context": "- `accumulatedMs -= tickIntervalMs / gameSpeed`.",
    "glossary": []
  },
  {
    "id": "F-0023",
    "topic": "Humidity",
    "formula": "ΔRH = (mass_kg ÷ (volume_m3 × SATURATION_VAPOR_DENSITY_KG_PER_M3)) × efficiency × powerMod",
    "sourcePath": "docs/system/simulation-engine.md",
    "heading": "Tick Order (environment phase)",
    "anchor": "tick-order-environment-phase",
    "startLine": 48,
    "endLine": 48,
    "context": "- Water mass flow (`humidifyRateKgPerTick`, `dehumidifyRateKgPerTick` or `latentRemovalKgPerTick`) converts to relative humidity deltas with `ΔRH = (mass_kg ÷ (volume_m3 × SATURATION_VAPOR_DENSITY_KG_PER_M3)) × efficiency × powerMod`.",
    "glossary": []
  },
  {
    "id": "F-0024",
    "topic": "Environment",
    "formula": "Δ = k_mix * (ambient − current)",
    "sourcePath": "docs/system/simulation-engine.md",
    "heading": "Tick Order (environment phase)",
    "anchor": "tick-order-environment-phase",
    "startLine": 58,
    "endLine": 58,
    "context": "- Exponential pull: `Δ = k_mix * (ambient − current)`.",
    "glossary": []
  },
  {
    "id": "F-0025",
    "topic": "Nutrition",
    "formula": "req_phase = curve[phase]",
    "sourcePath": "docs/system/simulation-engine.md",
    "heading": "Tick Order (plant phase)",
    "anchor": "tick-order-plant-phase",
    "startLine": 86,
    "endLine": 86,
    "context": "`req_phase = curve[phase]          // g/m²/day`",
    "glossary": []
  },
  {
    "id": "F-0026",
    "topic": "Nutrition",
    "formula": "req_tick_plant = req_phase * (zoneArea / plantCount) * (tickHours / 24)",
    "sourcePath": "docs/system/simulation-engine.md",
    "heading": "Tick Order (plant phase)",
    "anchor": "tick-order-plant-phase",
    "startLine": 87,
    "endLine": 87,
    "context": "`req_tick_plant = req_phase * (zoneArea / plantCount) * (tickHours / 24)`",
    "glossary": []
  },
  {
    "id": "F-0027",
    "topic": "Stress",
    "formula": "stress_raw = Σ w_D * penalty_D",
    "sourcePath": "docs/system/simulation-engine.md",
    "heading": "Tick Order (plant phase)",
    "anchor": "tick-order-plant-phase",
    "startLine": 91,
    "endLine": 91,
    "context": "Combine: `stress_raw = Σ w_D * penalty_D`.",
    "glossary": []
  },
  {
    "id": "F-0028",
    "topic": "Stress",
    "formula": "stress = clamp01(stress_raw * (1 − generalResilience))",
    "sourcePath": "docs/system/simulation-engine.md",
    "heading": "Tick Order (plant phase)",
    "anchor": "tick-order-plant-phase",
    "startLine": 92,
    "endLine": 92,
    "context": "Resilience mitigation: `stress = clamp01(stress_raw * (1 − generalResilience))`.",
    "glossary": []
  },
  {
    "id": "F-0029",
    "topic": "Stress",
    "formula": "stress > θ_stress",
    "sourcePath": "docs/system/simulation-engine.md",
    "heading": "Tick Order (plant phase)",
    "anchor": "tick-order-plant-phase",
    "startLine": 94,
    "endLine": 94,
    "context": "If `stress > θ_stress`: `health -= α * stress`; otherwise passive recovery `health += β_recovery`.",
    "glossary": []
  },
  {
    "id": "F-0030",
    "topic": "Health",
    "formula": "health -= α * stress",
    "sourcePath": "docs/system/simulation-engine.md",
    "heading": "Tick Order (plant phase)",
    "anchor": "tick-order-plant-phase",
    "startLine": 94,
    "endLine": 94,
    "context": "If `stress > θ_stress`: `health -= α * stress`; otherwise passive recovery `health += β_recovery`.",
    "glossary": []
  },
  {
    "id": "F-0031",
    "topic": "Health",
    "formula": "health += β_recovery",
    "sourcePath": "docs/system/simulation-engine.md",
    "heading": "Tick Order (plant phase)",
    "anchor": "tick-order-plant-phase",
    "startLine": 94,
    "endLine": 94,
    "context": "If `stress > θ_stress`: `health -= α * stress`; otherwise passive recovery `health += β_recovery`.",
    "glossary": []
  },
  {
    "id": "F-0032",
    "topic": "Growth",
    "formula": "actualGrowth = potentialGrowth * health * (1 − γ * stress)",
    "sourcePath": "docs/system/simulation-engine.md",
    "heading": "Tick Order (plant phase)",
    "anchor": "tick-order-plant-phase",
    "startLine": 99,
    "endLine": 99,
    "context": "- Apply health & stress: `actualGrowth = potentialGrowth * health * (1 − γ * stress)`.",
    "glossary": []
  },
  {
    "id": "F-0033",
    "topic": "Energy",
    "formula": "device.power_kW × tickHours × electricityCostPerKWh",
    "sourcePath": "docs/system/simulation-engine.md",
    "heading": "Economics (currency-neutral)",
    "anchor": "economics-currency-neutral",
    "startLine": 180,
    "endLine": 180,
    "context": "- **Energy**: sum `(device.power_kW × tickHours × electricityCostPerKWh)` for active devices.",
    "glossary": []
  },
  {
    "id": "F-0034",
    "topic": "Time Scaling",
    "formula": "tickHours = tickLengthMinutes / 60",
    "sourcePath": "docs/system/simulation-engine.md",
    "heading": "Economics (currency-neutral)",
    "anchor": "economics-currency-neutral",
    "startLine": 185,
    "endLine": 185,
    "context": "(`tickHours = tickLengthMinutes / 60`) so that changing the tick length at runtime does not drift",
    "glossary": []
  },
  {
    "id": "F-0035",
    "topic": "Temperature",
    "formula": "Tₜ = Tₐ + (T₀ − Tₐ) · exp(−k · Δt)",
    "sourcePath": "docs/system/wb-physio.md",
    "heading": "Temperature Mixing (`temp.ts`)",
    "anchor": "temperature-mixing-tempts",
    "startLine": 12,
    "endLine": 12,
    "context": "- **Formula:** `Tₜ = Tₐ + (T₀ − Tₐ) · exp(−k · Δt)`",
    "glossary": []
  },
  {
    "id": "F-0036",
    "topic": "Transpiration",
    "formula": "g_c = g₀ · clamp(LAI / 3, 0.3, 2)",
    "sourcePath": "docs/system/wb-physio.md",
    "heading": "Transpiration (`transpiration.ts`)",
    "anchor": "transpiration-transpirationts",
    "startLine": 50,
    "endLine": 50,
    "context": "- Effective canopy conductance: `g_c = g₀ · clamp(LAI / 3, 0.3, 2)` with `g₀ = 0.008 mol·m⁻²·s⁻¹·kPa⁻¹`.",
    "glossary": []
  },
  {
    "id": "F-0037",
    "topic": "Transpiration",
    "formula": "E = g_c · VPD · f_stomatal",
    "sourcePath": "docs/system/wb-physio.md",
    "heading": "Transpiration (`transpiration.ts`)",
    "anchor": "transpiration-transpirationts",
    "startLine": 51,
    "endLine": 51,
    "context": "- Flux: `E = g_c · VPD · f_stomatal` (mol·m⁻²·s⁻¹).",
    "glossary": []
  },
  {
    "id": "F-0038",
    "topic": "Transpiration",
    "formula": "litres = E · area · Δt · 3600 · 0.018",
    "sourcePath": "docs/system/wb-physio.md",
    "heading": "Transpiration (`transpiration.ts`)",
    "anchor": "transpiration-transpirationts",
    "startLine": 52,
    "endLine": 52,
    "context": "- Tick volume: `litres = E · area · Δt · 3600 · 0.018` (0.018 L per mol of water).",
    "glossary": []
  },
  {
    "id": "F-0039",
    "topic": "Tasks",
    "formula": "U = w1*priority + w2*skillMatch + w3*roleAffinity + w4*urgency",
    "sourcePath": "docs/TDD.md",
    "heading": "6) Personnel as Agents",
    "anchor": "6-personnel-as-agents",
    "startLine": 85,
    "endLine": 85,
    "context": "U = w1*priority + w2*skillMatch + w3*roleAffinity + w4*urgency",
    "glossary": []
  },
  {
    "id": "F-0040",
    "topic": "Tasks",
    "formula": "w5*distance - w6*fatigue + w7*morale + w8*toolAvailability ± traitMods",
    "sourcePath": "docs/TDD.md",
    "heading": "6) Personnel as Agents",
    "anchor": "6-personnel-as-agents",
    "startLine": 86,
    "endLine": 86,
    "context": "w5*distance - w6*fatigue + w7*morale + w8*toolAvailability ± traitMods",
    "glossary": []
  }
]
