/** The recommended number of air changes per hour for a zone to be considered to have optimal climate control. */
export const RECOMMENDED_ACH = 5;

/** The base amount of water vapor (in kg) that plants are expected to produce per square meter per hour, which dehumidifiers must counteract. */
export const BASE_DEHUMIDIFICATION_LOAD_PER_M2_PER_H = 0.02;

/** The required rate of CO₂ injection (in ppm) per hour per square meter needed to maintain optimal levels against plant consumption and natural leakage. */
export const BASE_CO2_INJECTION_PPM_PER_TICK_PER_M2 = 5;

/** The default temperature (in Celsius) of the outside world that the zone's internal temperature will naturally drift towards. */
export const AMBIENT_TEMP_C = 20;

/** The default relative humidity (as a fraction from 0 to 1) of the outside world. */
export const AMBIENT_HUMIDITY_RH = 0.5;

/** The default CO₂ concentration (in parts per million) of the outside world. */
export const AMBIENT_CO2_PPM = 400;

/** Device kinds that provide active temperature control within a zone. */
export const TEMPERATURE_DEVICE_KINDS: ReadonlySet<string> = new Set(['ClimateUnit', 'HVAC']);

/** Device kinds capable of humidifying or dehumidifying a zone. */
export const HUMIDITY_DEVICE_KINDS: ReadonlySet<string> = new Set([
  'HumidityControlUnit',
  'Dehumidifier',
]);

/** Device kinds that enrich or scrub CO₂ within a zone. */
export const CO2_DEVICE_KINDS: ReadonlySet<string> = new Set(['CO2Injector']);

/** Device kinds that contribute photosynthetic photon flux density (PPFD). */
export const LIGHT_DEVICE_KINDS: ReadonlySet<string> = new Set(['Lamp']);

/** A multiplier determining how quickly a zone's temperature normalizes towards the ambient temperature each hour. */
export const TEMP_NORMALIZATION_FACTOR = 0.1;

/** A multiplier determining how quickly a zone's humidity normalizes towards the ambient humidity each hour. */
export const HUMIDITY_NORMALIZATION_FACTOR = 0.05;

/** A multiplier determining how quickly a zone's CO₂ level normalizes towards the ambient CO₂ level each hour. */
export const CO2_NORMALIZATION_FACTOR = 0.1;

/** A conversion factor that determines how much a lamp's power consumption (in kW) contributes to an increase in the zone's temperature (°C) each hour. */
export const LAMP_HEAT_FACTOR = 0.5;

/** A conversion factor that determines how much a climate unit's cooling capacity (in kW) contributes to a decrease in the zone's temperature (°C) each hour. */
export const COOLING_CAPACITY_FACTOR = 0.8;

/** A conversion factor for the waste heat generated by a dehumidifier, determining how much its power consumption (in kW) increases the zone's temperature (°C) each hour. */
export const DEHUMIDIFIER_HEAT_FACTOR = 0.2;

/** The amount of relative humidity (as a fraction from 0 to 1) that a single plant adds to the zone each hour through transpiration. */
export const PLANT_TRANSPIRATION_RH_PER_PLANT = 0.00005;

/**
 * Approximate saturated water vapour density of air at 20 °C in kg·m⁻³. Used to convert
 * humidifier/dehumidifier water mass flow into relative humidity deltas for a zone volume.
 */
export const SATURATION_VAPOR_DENSITY_KG_PER_M3 = 0.0173;

/** The amount of CO₂ (in ppm) that a single plant removes from the zone each hour during photosynthesis. */
export const PLANT_CO2_CONSUMPTION_PPM_PER_PLANT = 0.2;

/** The base amount of durability that every active device loses each hour from wear and tear. */
export const BASE_DURABILITY_DECAY_PER_TICK = 0.00002;

/** The underlying random probability that any given plant might contract a disease each hour. */
export const BASE_DISEASE_CHANCE_PER_TICK = 0.0001;

/**
 * Specific heat capacity proxy for air in kWh·m⁻³·K⁻¹ used to translate device energy draw into
 * temperature deltas for a zone volume.
 */
export const SPECIFIC_HEAT_AIR_KWH_PER_M3K = 0.000336;

/** Minimum fallback heat capacity (kWh·K⁻¹) applied when a zone volume is extremely small. */
export const MIN_HEAT_CAPACITY_KWH_PER_K = 0.0001;

/** Fraction of a light's electrical power that is assumed to convert into heat inside the zone. */
export const DEFAULT_LIGHT_HEAT_FRACTION = 0.4;

/** Default area coverage in square metres for lights lacking an explicit `coverageArea` setting. */
export const DEFAULT_LIGHT_COVERAGE_M2 = 1;

/** Temperature error (°C) assumed for full-power HVAC response when no modulation is provided. */
export const DEFAULT_FULL_POWER_DELTA_K = 1;

/** Default temperature hysteresis band (°C) applied when controllers omit explicit settings. */
export const DEFAULT_HYSTERESIS_K = 0.5;

/** Relative humidity hysteresis (0–1) assumed for humidifiers/dehumidifiers by default. */
export const DEFAULT_HUMIDITY_HYSTERESIS = 0.05;

/** Relative humidity delta (0–1) that maps to full humidity device power when modulation is absent. */
export const DEFAULT_FULL_POWER_DELTA_RH = 0.1;

/** Length of the default CO₂ injector pulse in minutes for scaling per-tick dosing. */
export const DEFAULT_CO2_PULSE_MINUTES = 1;

/** Maximum safe CO₂ concentration (ppm) enforced when a device omits its own upper bound. */
export const DEFAULT_MAX_CO2_PPM = 1800;

/** Minimum zone volume (m³) used when converting transpiration to humidity deltas. */
export const MIN_ZONE_VOLUME_M3 = 0.001;

/**
 * Mass of nutrients (grams) consumed per litre of solution at full strength for transpiration feedback.
 */
export const DEFAULT_NUTRIENT_GRAMS_PER_LITER_AT_STRENGTH_1 = 0.8;

/**
 * Default PI gains and bounds for temperature control output (expressed in % heater/cooler demand).
 */
export const CLIMATE_CONTROLLER_DEFAULT_TEMPERATURE_CONFIG = {
  kp: 20,
  ki: 1,
  min: -100,
  max: 100,
} as const;

/**
 * Default PI gains and bounds for humidity control (humidify/dehumidify demand in %).
 */
export const CLIMATE_CONTROLLER_DEFAULT_HUMIDITY_CONFIG = {
  kp: 400,
  ki: 40,
  min: -100,
  max: 100,
} as const;

/** Default PI gains and bounds for CO₂ injection demand (0–100 % output). */
export const CLIMATE_CONTROLLER_DEFAULT_CO2_CONFIG = {
  kp: 0.1,
  ki: 0.02,
  min: 0,
  max: 100,
} as const;

/** Smallest controller output quantum applied when discretising PI controller results. */
export const CLIMATE_CONTROLLER_DEFAULT_OUTPUT_STEP = 1;
